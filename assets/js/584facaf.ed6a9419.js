"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[286],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>m,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){return function(t){var n=p(t.components);return r.createElement(e,o({},t,{components:n}))}},p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,c=u["".concat(i,".").concat(m)]||u[m]||f[m]||o;return n?r.createElement(c,l(l({ref:t},s),{},{components:n})):r.createElement(c,l({ref:t},s))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},50892:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={},i="DefaultInfo",l={unversionedId:"generated/native/providers/DefaultInfo",id:"generated/native/providers/DefaultInfo",title:"DefaultInfo",description:"A provider that all rules' implementations must return",source:"@site/../docs/generated/native/providers/DefaultInfo.md",sourceDirName:"generated/native/providers",slug:"/generated/native/providers/DefaultInfo",permalink:"/docs/generated/native/providers/DefaultInfo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"ConstraintValueInfo",permalink:"/docs/generated/native/providers/ConstraintValueInfo"},next:{title:"ExecutionPlatformInfo",permalink:"/docs/generated/native/providers/ExecutionPlatformInfo"}},d={},s=[{value:"Members",id:"members",level:3},{value:"default_outputs : <code>[&quot;artifact&quot;]</code>",id:"default_outputs--artifact",level:2},{value:"other_outputs : <code>[&quot;artifact&quot;]</code>",id:"other_outputs--artifact",level:2},{value:"sub_targets : <code>{str.type: &quot;provider_collection&quot;}</code>",id:"sub_targets--strtype-provider_collection",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"defaultinfo"},"DefaultInfo"),(0,a.mdx)("p",null,"A provider that all rules' implementations must return"),(0,a.mdx)("p",null,"In many simple cases, this can be inferred for the user."),(0,a.mdx)("p",null,"Example of a rule's implementation function and how these fields are used by the framework:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-starlark"},'# //foo_binary.bzl\ndef impl(ctx):\n    ctx.action.run([ctx.attrs._cc[RunInfo], "-o", ctx.attrs.out.as_output()] + ctx.attrs.srcs)\n    ctx.action.run([\n        ctx.attrs._strip[RunInfo],\n        "--binary",\n        ctx.attrs.out,\n        "--stripped-out",\n        ctx.attrs.stripped.as_output(),\n        "--debug-symbols-out",\n        ctx.attrs.debug_info.as_output(),\n    ])\n    return [\n        DefaultInfo(\n            sub_targets = {\n                "stripped": [\n                    DefaultInfo(default_outputs = [ctx.attrs.stripped, ctx.attrs.debug_info]),\n                ],\n            },\n            default_output = ctx.attrs.out,\n    ]\n\nfoo_binary = rule(\n    impl=impl,\n    attrs={\n        "srcs": attrs.list(attrs.source()),\n        "out": attrs.output(),\n        "stripped": attrs.output(),\n        "debug_info": attrs.output(),\n        "_cc": attrs.dep(default="//tools:cc", providers=[RunInfo]),\n        "_strip_script": attrs.dep(default="//tools:strip", providers=[RunInfo])\n)\n\ndef foo_binary_wrapper(name, srcs):\n    foo_binary(\n        name = name,\n        srcs = src,\n        out = name,\n        stripped = name + ".stripped",\n        debug_info = name + ".debug_info",\n    )\n\n# //subdir/BUCK\nload("//:foo_binary.bzl", "foo_binary_wrapper")\n\ngenrule(name = "gen_stuff", ...., default_outs = ["foo.cpp"])\n\n# ":gen_stuff" pulls the default_outputs for //subdir:gen_stuff\nfoo_binary_wrapper(name = "foo", srcs = glob(["*.cpp"]) + [":gen_stuff"])\n\n# Builds just \'foo\' binary. The strip command is never invoked.\n$ buck build //subdir:foo\n\n# builds the \'foo\' binary, because it is needed by the \'strip\' command. Ensures that\n# both the stripped binary and the debug symbols are built.\n$ buck build //subdir:foo[stripped]\n')),(0,a.mdx)("h3",{id:"members"},"Members"),(0,a.mdx)("table",{class:"starlark_table starlark_members_table"},(0,a.mdx)("thead",null,(0,a.mdx)("tr",null,(0,a.mdx)("th",null,"Member"),(0,a.mdx)("th",null,"Description"),(0,a.mdx)("th",null,"Type"))),(0,a.mdx)("tbody",null,(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"default_outputs")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"A list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact"),'s that are built by default if this rule is requested explicitly, or depended on as as a "source".')),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'["artifact"]\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"other_outputs")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"A list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"ArtifactTraversable"),". The underlying ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact"),"s they define will be built by default if this rule is requested, but ",(0,a.mdx)("em",{parentName:"p"},"not"),' when it\'s depended on as as a "source". ',(0,a.mdx)("inlineCode",{parentName:"p"},"ArtifactTraversable")," can be an ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact")," (which yields itself), or ",(0,a.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", which expand to all their inputs.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'["artifact"]\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"sub_targets")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"A mapping of names to ",(0,a.mdx)("inlineCode",{parentName:"p"},"ProviderCollection"),"s. The keys are used when resolving the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ProviderName")," portion of a ",(0,a.mdx)("inlineCode",{parentName:"p"},"ProvidersLabel"),". These collections can contain, and actually /must/ contain a ",(0,a.mdx)("inlineCode",{parentName:"p"},"DefaultInfo")," provider. However, nested label syntax is not supported. That is, ",(0,a.mdx)("inlineCode",{parentName:"p"},"cell//foo:bar[baz]")," is valid, ",(0,a.mdx)("inlineCode",{parentName:"p"},"cell//foo:bar[baz][quz]")," is not.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'{str.type: "provider_collection"}\n')))))),(0,a.mdx)("h2",{id:"default_outputs--artifact"},"default_outputs : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'["artifact"]')),(0,a.mdx)("p",null,"A list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact"),'s that are built by default if this rule is requested explicitly, or depended on as as a "source".'),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"other_outputs--artifact"},"other_outputs : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'["artifact"]')),(0,a.mdx)("p",null,"A list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"ArtifactTraversable"),". The underlying ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact"),"s they define will be built by default if this rule is requested, but ",(0,a.mdx)("em",{parentName:"p"},"not"),' when it\'s depended on as as a "source". ',(0,a.mdx)("inlineCode",{parentName:"p"},"ArtifactTraversable")," can be an ",(0,a.mdx)("inlineCode",{parentName:"p"},"Artifact")," (which yields itself), or ",(0,a.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", which expand to all their inputs."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"sub_targets--strtype-provider_collection"},"sub_targets : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'{str.type: "provider_collection"}')),(0,a.mdx)("p",null,"A mapping of names to ",(0,a.mdx)("inlineCode",{parentName:"p"},"ProviderCollection"),"s. The keys are used when resolving the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ProviderName")," portion of a ",(0,a.mdx)("inlineCode",{parentName:"p"},"ProvidersLabel"),". These collections can contain, and actually /must/ contain a ",(0,a.mdx)("inlineCode",{parentName:"p"},"DefaultInfo")," provider. However, nested label syntax is not supported. That is, ",(0,a.mdx)("inlineCode",{parentName:"p"},"cell//foo:bar[baz]")," is valid, ",(0,a.mdx)("inlineCode",{parentName:"p"},"cell//foo:bar[baz][quz]")," is not."))}p.isMDXComponent=!0}}]);