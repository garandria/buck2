"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6358],{3905:(e,t,l)=>{l.r(t),l.d(t,{MDXContext:()=>s,MDXProvider:()=>o,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>p});var n=l(67294);function r(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},a.apply(this,arguments)}function d(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function u(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?d(Object(l),!0).forEach((function(t){r(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):d(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function i(e,t){if(null==e)return{};var l,n,r=function(e,t){if(null==e)return{};var l,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(r[l]=e[l]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(r[l]=e[l])}return r}var s=n.createContext({}),p=function(e){return function(t){var l=m(t.components);return n.createElement(e,a({},t,{components:l}))}},m=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):u(u({},t),e)),l},o=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},x="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var l=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=m(l),o=r,x=p["".concat(d,".").concat(o)]||p[o]||c[o]||a;return l?n.createElement(x,u(u({ref:t},s),{},{components:l})):n.createElement(x,u({ref:t},s))}));function g(e,t){var l=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=l.length,d=new Array(a);d[0]=f;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[x]="string"==typeof e?e:r,d[1]=u;for(var s=2;s<a;s++)d[s]=l[s];return n.createElement.apply(null,d)}return n.createElement.apply(null,l)}f.displayName="MDXCreateElement"},12244:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var n=l(87462),r=(l(67294),l(3905));const a={},d="cqueryctx",u={unversionedId:"generated/bxl/cqueryctx",id:"generated/bxl/cqueryctx",title:"cqueryctx",description:"The context for performing cquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command.",source:"@site/../docs/generated/bxl/cqueryctx.md",sourceDirName:"generated/bxl",slug:"/generated/bxl/cqueryctx",permalink:"/docs/generated/bxl/cqueryctx",draft:!1,tags:[],version:"current",frontMatter:{}},i={},s=[{value:"Members",id:"members",level:3},{value:"allpaths",id:"allpaths",level:2},{value:"attrfilter",id:"attrfilter",level:2},{value:"attrregexfilter",id:"attrregexfilter",level:2},{value:"Details",id:"details",level:3},{value:"buildfile",id:"buildfile",level:2},{value:"Details",id:"details-1",level:3},{value:"deps",id:"deps",level:2},{value:"Details",id:"details-2",level:3},{value:"eval",id:"eval",level:2},{value:"Details",id:"details-3",level:3},{value:"filter",id:"filter",level:2},{value:"Details",id:"details-4",level:3},{value:"inputs",id:"inputs",level:2},{value:"Details",id:"details-5",level:3},{value:"kind",id:"kind",level:2},{value:"Details",id:"details-6",level:3},{value:"owner",id:"owner",level:2},{value:"Details",id:"details-7",level:3},{value:"rdeps",id:"rdeps",level:2},{value:"Details",id:"details-8",level:3},{value:"somepaths",id:"somepaths",level:2},{value:"testsof",id:"testsof",level:2}],p={toc:s};function m(e){let{components:t,...l}=e;return(0,r.mdx)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"cqueryctx"},"cqueryctx"),(0,r.mdx)("p",null,"The context for performing ",(0,r.mdx)("inlineCode",{parentName:"p"},"cquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command."),(0,r.mdx)("p",null,"Query results are ",(0,r.mdx)("inlineCode",{parentName:"p"},"[StarlarkTargetSet]"),"s of ",(0,r.mdx)("inlineCode",{parentName:"p"},"[ConfiguredTargetNod]"),"s, which supports iteration,\nindexing, ",(0,r.mdx)("inlineCode",{parentName:"p"},"len()"),", set addition/subtraction, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,r.mdx)("h3",{id:"members"},"Members"),(0,r.mdx)("table",{class:"starlark_table starlark_members_table"},(0,r.mdx)("thead",null,(0,r.mdx)("tr",null,(0,r.mdx)("th",null,"Member"),(0,r.mdx)("th",null,"Description"),(0,r.mdx)("th",null,"Type"))),(0,r.mdx)("tbody",null,(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"allpaths")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    from: "",\n  to: ""\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"attrfilter")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The attrfilter query for rule attribute filtering.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    attr: str.type,\n  value: str.type,\n  targets: ""\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"attrregexfilter")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    attribute: str.type,\n  value: str.type,\n  targets: ""\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"buildfile")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"Find the build file(s) that defines a target or a target set.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    targets: ""\n) -> "file_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"deps")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The deps query for finding the transitive closure of dependencies.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    universe: "",\n  depth: [None, int.type] = None,\n  filter: [None, str.type] = None\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"eval")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"Evaluates some general query string.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    query: str.type,\n  query_args: [str.type] = None,\n  target_universe: [None, [str.type]] = None\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"filter")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The filter query for filtering targets by name.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    regex: str.type,\n  targets: ""\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"inputs")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The inputs query for finding input files.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    targets: ""\n) -> "file_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"kind")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The kind query for filtering targets by rule type.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    regex: str.type,\n  targets: ""\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"owner")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The owner query for finding targets that own specified files.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    files: [str.type, "file_set"]\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"rdeps")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies. Takes in an optional depth parameter. If no depth is passed in, then all rdeps found will be returned.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    universe: "",\n  from: "",\n  depth: [None, int.type] = None\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"somepaths")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    from: "",\n  to: ""\n) -> "target_set"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"testsof")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"The testsof query for lising the tests of the specified targets.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    targets: ""\n) -> "target_set"\n')))))),(0,r.mdx)("h2",{id:"allpaths"},"allpaths"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def allpaths(from: "", to: "") -> "target_set"\n')),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"attrfilter"},"attrfilter"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def attrfilter(attr: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,r.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"attrregexfilter"},"attrregexfilter"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def attrregexfilter(attribute: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,r.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,r.mdx)("h3",{id:"details"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.cquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"buildfile"},"buildfile"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def buildfile(targets: "") -> "file_set"\n')),(0,r.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,r.mdx)("h3",{id:"details-1"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.cquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.cquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"deps"},"deps"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def deps(universe: "", depth: [None, int.type] = None, filter: [None, str.type] = None) -> "target_set"\n')),(0,r.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,r.mdx)("h3",{id:"details-2"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.cquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"eval"},"eval"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def eval(query: str.type, query_args: [str.type] = None, target_universe: [None, [str.type]] = None) -> ""\n')),(0,r.mdx)("p",null,"Evaluates some general query string."),(0,r.mdx)("h3",{id:"details-3"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result = ctx.cquery().eval("inputs(root//bin:the_binary)")\n    ctx.output.print(result)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"filter"},"filter"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def filter(regex: str.type, targets: "") -> "target_set"\n')),(0,r.mdx)("p",null,"The filter query for filtering targets by name."),(0,r.mdx)("h3",{id:"details-4"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.cquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"inputs"},"inputs"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def inputs(targets: "") -> "file_set"\n')),(0,r.mdx)("p",null,"The inputs query for finding input files."),(0,r.mdx)("h3",{id:"details-5"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.cquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"kind"},"kind"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def kind(regex: str.type, targets: "") -> "target_set"\n')),(0,r.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,r.mdx)("h3",{id:"details-6"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.cquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"owner"},"owner"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def owner(files: [str.type, "file_set"]) -> "target_set"\n')),(0,r.mdx)("p",null,"The owner query for finding targets that own specified files."),(0,r.mdx)("h3",{id:"details-7"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.cquery().owner("bin/TARGETS.fixture")\n    ctx.output.print(owner)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"rdeps"},"rdeps"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def rdeps(universe: "", from: "", depth: [None, int.type] = None) -> "target_set"\n')),(0,r.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies. Takes in an optional depth parameter. If no depth is passed in, then all rdeps found will be returned."),(0,r.mdx)("h3",{id:"details-8"},"Details"),(0,r.mdx)("p",null,"Sample usage:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.cquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"somepaths"},"somepaths"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def somepaths(from: "", to: "") -> "target_set"\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"testsof"},"testsof"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def testsof(targets: "") -> "target_set"\n')),(0,r.mdx)("p",null,"The testsof query for lising the tests of the specified targets."))}m.isMDXComponent=!0}}]);