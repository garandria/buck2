"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"manualSidebar":[{"type":"link","label":"Introduction","href":"/docs/","docId":"index"},{"type":"category","label":"About Buck2","items":[{"type":"link","label":"Why Buck2","href":"/docs/why","docId":"why"},{"type":"link","label":"Getting Started","href":"/docs/getting_started","docId":"getting_started"},{"type":"category","label":"Benefits","items":[{"type":"link","label":"Benefits When Compared to Buck1","href":"/docs/benefits","docId":"benefits"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Concepts","items":[{"type":"link","label":"Concept Map","href":"/docs/concepts/concept_map","docId":"concepts/concept_map"},{"type":"link","label":"Target Pattern","href":"/docs/concepts/target_pattern","docId":"concepts/target_pattern"},{"type":"link","label":"Visibility","href":"/docs/concepts/visibility","docId":"concepts/visibility"},{"type":"link","label":"Daemon (buckd)","href":"/docs/concepts/daemon","docId":"concepts/daemon"},{"type":"link","label":"Glossary of Terms","href":"/docs/concepts/glossary","docId":"concepts/glossary"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Buck2 Users","items":[{"type":"category","label":"Commands","items":[{"type":"link","label":"Commands","href":"/docs/commands","docId":"commands"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Prelude Rules API","items":[{"type":"link","label":"prelude.bzl","href":"/docs/generated/starlark/prelude/prelude.bzl","docId":"generated/starlark/prelude/prelude.bzl"}],"collapsed":true,"collapsible":true,"href":"/docs/generated/starlark/prelude"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Rule Authors","items":[{"type":"link","label":"Writing Rules","href":"/docs/rule_authors/writing_rules","docId":"rule_authors/writing_rules"},{"type":"category","label":"Rule APIs","items":[{"type":"link","label":"Rule APIs","href":"/docs/rule_authors/rule_api","docId":"rule_authors/rule_api"},{"type":"category","label":"API Docs","items":[{"type":"link","label":"Artifact","href":"/docs/generated/native/Artifact","docId":"generated/native/Artifact"},{"type":"link","label":"build","href":"/docs/generated/native/build","docId":"generated/native/build"},{"type":"link","label":"builtins","href":"/docs/generated/native/builtins","docId":"generated/native/builtins"},{"type":"link","label":"cmd_args","href":"/docs/generated/native/cmd_args","docId":"generated/native/cmd_args"},{"type":"link","label":"ctx.actions","href":"/docs/generated/native/ctx.actions","docId":"generated/native/ctx.actions"},{"type":"link","label":"ctx","href":"/docs/generated/native/ctx","docId":"generated/native/ctx"},{"type":"category","label":"extension","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"function","href":"/docs/generated/native/extension/function","docId":"generated/native/extension/function"},{"type":"link","label":"regex","href":"/docs/generated/native/extension/regex","docId":"generated/native/extension/regex"}]},{"type":"link","label":"label","href":"/docs/generated/native/label","docId":"generated/native/label"},{"type":"link","label":"promise","href":"/docs/generated/native/promise","docId":"generated/native/promise"},{"type":"category","label":"providers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ConfigurationInfo","href":"/docs/generated/native/providers/ConfigurationInfo","docId":"generated/native/providers/ConfigurationInfo"},{"type":"link","label":"ConstraintSettingInfo","href":"/docs/generated/native/providers/ConstraintSettingInfo","docId":"generated/native/providers/ConstraintSettingInfo"},{"type":"link","label":"ConstraintValueInfo","href":"/docs/generated/native/providers/ConstraintValueInfo","docId":"generated/native/providers/ConstraintValueInfo"},{"type":"link","label":"DefaultInfo","href":"/docs/generated/native/providers/DefaultInfo","docId":"generated/native/providers/DefaultInfo"},{"type":"link","label":"ExecutionPlatformInfo","href":"/docs/generated/native/providers/ExecutionPlatformInfo","docId":"generated/native/providers/ExecutionPlatformInfo"},{"type":"link","label":"ExecutionPlatformRegistrationInfo","href":"/docs/generated/native/providers/ExecutionPlatformRegistrationInfo","docId":"generated/native/providers/ExecutionPlatformRegistrationInfo"},{"type":"link","label":"ExternalRunnerTestInfo","href":"/docs/generated/native/providers/ExternalRunnerTestInfo","docId":"generated/native/providers/ExternalRunnerTestInfo"},{"type":"link","label":"InstallInfo","href":"/docs/generated/native/providers/InstallInfo","docId":"generated/native/providers/InstallInfo"},{"type":"link","label":"PlatformInfo","href":"/docs/generated/native/providers/PlatformInfo","docId":"generated/native/providers/PlatformInfo"},{"type":"link","label":"RunInfo","href":"/docs/generated/native/providers/RunInfo","docId":"generated/native/providers/RunInfo"},{"type":"link","label":"TemplatePlaceholderInfo","href":"/docs/generated/native/providers/TemplatePlaceholderInfo","docId":"generated/native/providers/TemplatePlaceholderInfo"}]},{"type":"category","label":"standard","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"dict","href":"/docs/generated/native/standard/dict","docId":"generated/native/standard/dict"},{"type":"link","label":"list","href":"/docs/generated/native/standard/list","docId":"generated/native/standard/list"},{"type":"link","label":"string","href":"/docs/generated/native/standard/string","docId":"generated/native/standard/string"}]}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"link","label":"Transitive Sets","href":"/docs/rule_authors/transitive_sets","docId":"rule_authors/transitive_sets"},{"type":"link","label":"Configurations","href":"/docs/rule_authors/configurations","docId":"rule_authors/configurations"},{"type":"link","label":"Configuration Transitions","href":"/docs/rule_authors/configuration_transitions","docId":"rule_authors/configuration_transitions"},{"type":"link","label":"Dynamic Dependencies","href":"/docs/rule_authors/dynamic_dependencies","docId":"rule_authors/dynamic_dependencies"},{"type":"link","label":"Anonymous Targets","href":"/docs/rule_authors/anon_targets","docId":"rule_authors/anon_targets"},{"type":"link","label":"Test Execution","href":"/docs/rule_authors/test_execution","docId":"rule_authors/test_execution"},{"type":"link","label":"Optimization","href":"/docs/rule_authors/optimization","docId":"rule_authors/optimization"},{"type":"link","label":"Incremental Actions","href":"/docs/rule_authors/incremental_actions","docId":"rule_authors/incremental_actions"},{"type":"link","label":"Alias","href":"/docs/rule_authors/alias","docId":"rule_authors/alias"},{"type":"link","label":"Dep Files","href":"/docs/rule_authors/dep_files","docId":"rule_authors/dep_files"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Buck2 Developers","items":[{"type":"category","label":"Architecture","items":[{"type":"link","label":"Architectural Model","href":"/docs/developers/architecture/buck2","docId":"developers/architecture/buck2"},{"type":"link","label":"Buck1 vs Buck2","href":"/docs/developers/architecture/buck1_vs_buck2","docId":"developers/architecture/buck1_vs_buck2"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Parity Testing","href":"/docs/developers/parity_script","docId":"developers/parity_script"},{"type":"link","label":"Finding Commands That Buck2 Ran","href":"/docs/developers/what-ran","docId":"developers/what-ran"},{"type":"category","label":"Starlark Language","items":[{"type":"link","label":"Environments","href":"/docs/generated/starlark_rust_docs/environment","docId":"generated/starlark_rust_docs/environment"},{"type":"link","label":"A Moving Garbage Collector","href":"/docs/generated/starlark_rust_docs/gc","docId":"generated/starlark_rust_docs/gc"},{"type":"link","label":"Heaps and Heap References","href":"/docs/generated/starlark_rust_docs/heaps","docId":"generated/starlark_rust_docs/heaps"},{"type":"link","label":"Starlark Types","href":"/docs/generated/starlark_rust_docs/types","docId":"generated/starlark_rust_docs/types"},{"type":"link","label":"Value Representation","href":"/docs/generated/starlark_rust_docs/values","docId":"generated/starlark_rust_docs/values"},{"type":"link","label":"Starlark Language Specification","href":"/docs/developers/starlark_language_spec","docId":"developers/starlark_language_spec"},{"type":"link","label":"Starlark in Rust","href":"/docs/developers/starlark_rust","docId":"developers/starlark_rust"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Request for Comments","href":"/docs/developers/request_for_comments","docId":"developers/request_for_comments"},{"type":"link","label":"Windows Cheat Sheet","href":"/docs/developers/windows_cheat_sheet","docId":"developers/windows_cheat_sheet"}],"collapsed":true,"collapsible":true}]},"docs":{"benefits":{"id":"benefits","title":"Benefits When Compared to Buck1","description":"For reports from real users, see testimonials, which includes Workplace posts giving full context.","sidebar":"manualSidebar"},"commands":{"id":"commands","title":"Commands","description":"To get help for a given buck2 subcommand, use buck2 $SUBCOMMAND --help, e.g. buck2 build --help.","sidebar":"manualSidebar"},"concepts/concept_map":{"id":"concepts/concept_map","title":"Concept Map","description":"The Concept Map provides an at-a-glance overview of the relationships between widely used Buck2 concepts. It is meant to be a tool to help those onboarding to Buck2 to quickly gain an understanding of the Buck2 environment.","sidebar":"manualSidebar"},"concepts/daemon":{"id":"concepts/daemon","title":"Daemon (buckd)","description":"The first time that a Buck2 command is run, Buck2 starts a daemon process for the current project. For subsequent commands, Buck2 checks for the running daemon process and, if found, uses the daemon to execute the command. Using the Buck2 daemon can save significant time as it enables Buck to share cache between Buck2 invocations.","sidebar":"manualSidebar"},"concepts/glossary":{"id":"concepts/glossary","title":"Glossary of Terms","description":".buckconfig","sidebar":"manualSidebar"},"concepts/target_pattern":{"id":"concepts/target_pattern","title":"Target Pattern","description":"A target pattern is a string that resolves to a set of targets. A target pattern can be used as arguments to commands, such as buck2 build and buck uquery. You can also use build target patterns in the visibility) argument of your build rules.","sidebar":"manualSidebar"},"concepts/visibility":{"id":"concepts/visibility","title":"Visibility","description":"Visibility determines whether a target can reference another target in its attributes. In a large project, you may want to prevent developers from \'reaching across\' the project and pulling in additional code. Reducing the visibility of targets can help prevent that type of behavior.","sidebar":"manualSidebar"},"developers/architecture/buck1_vs_buck2":{"id":"developers/architecture/buck1_vs_buck2","title":"Buck1 vs Buck2","description":"At a glance","sidebar":"manualSidebar"},"developers/architecture/buck2":{"id":"developers/architecture/buck2","title":"Architectural Model","description":"High-level Overview","sidebar":"manualSidebar"},"developers/architecture/buck2_telemetry":{"id":"developers/architecture/buck2_telemetry","title":"Buck2 Telemetry","description":"\ud83d\udea7\xa0\xa0\xa0THIS PAGE IS UNDER CONSTRUCTION"},"developers/bxl":{"id":"developers/bxl","title":"Why BXL","description":"Currently, BXL is under active development and should be considered a soft launch, slightly stable, with some missing APIs, and subject to changes."},"developers/bxl_faqs":{"id":"developers/bxl_faqs","title":"FAQs","description":"When should I use BXL over Buck2 API/CLI?"},"developers/bxl_getting_started":{"id":"developers/bxl_getting_started","title":"Getting Started","description":"Writing a BXL"},"developers/bxl_how_tos":{"id":"developers/bxl_how_tos","title":"Common How-Tos","description":"Passing in and using CLI args"},"developers/bxl_testimonials":{"id":"developers/bxl_testimonials","title":"BXL Testimonials","description":"C++ LSP"},"developers/options":{"id":"developers/options","title":"Buck 2 specific options","description":"Buck 2 introduces some options that don\'t exist in v1 and are accessed in the"},"developers/parity_script":{"id":"developers/parity_script","title":"Parity Testing","description":"This page covers the parity testing/command replay script found in scripts/buck_replay/main.py.","sidebar":"manualSidebar"},"developers/request_for_comments":{"id":"developers/request_for_comments","title":"Request for Comments","description":"Following are Request for Comments (RFCs) at specific stages of the lifecycle.","sidebar":"manualSidebar"},"developers/starlark_language_spec":{"id":"developers/starlark_language_spec","title":"Starlark Language Specification","description":"The Starlark language spec can be found in the Bazel GitHub repository.","sidebar":"manualSidebar"},"developers/starlark_rust":{"id":"developers/starlark_rust","title":"Starlark in Rust","description":"\ud83d\udea7\xa0\xa0\xa0THIS PAGE IS UNDER CONSTRUCTION","sidebar":"manualSidebar"},"developers/what-ran":{"id":"developers/what-ran","title":"Finding Commands That Buck2 Ran","description":"Buck2 logs all the commands it runs. So, after you\'ve run a build, you can query Buck2 to get access to the exact command it used.","sidebar":"manualSidebar"},"developers/windows_cheat_sheet":{"id":"developers/windows_cheat_sheet","title":"Windows Cheat Sheet","description":"This page contains notes and tips to assist you in understanding the different tools used when migrating Buck2 to Windows.","sidebar":"manualSidebar"},"generated/bxl/action":{"id":"generated/bxl/action","title":"action","description":"Methods for an action."},"generated/bxl/analysis_result":{"id":"generated/bxl/analysis_result","title":"analysis_result","description":"The result of running an analysis in bxl."},"generated/bxl/audit_ctx":{"id":"generated/bxl/audit_ctx","title":"audit_ctx","description":"The context for performing audit operations in bxl. The functions offered on this ctx are the same behaviour as the audit functions available within audit command."},"generated/bxl/bxl_actions":{"id":"generated/bxl/bxl_actions","title":"bxl_actions","description":"The bxl action context for creating and running actions."},"generated/bxl/bxl_build_result":{"id":"generated/bxl/bxl_build_result","title":"bxl_build_result","description":"The result of building in bxl."},"generated/bxl/bxl_ctx":{"id":"generated/bxl/bxl_ctx","title":"bxl_ctx","description":"The bxl context that the top level bxl implementation receives as parameter. This context contains all the core bxl functions to query, build, create actions, etc."},"generated/bxl/bxl_output_stream":{"id":"generated/bxl/bxl_output_stream","title":"bxl_output_stream","description":"The output stream for bxl to print values to the console as their result"},"generated/bxl/configured_attr_val":{"id":"generated/bxl/configured_attr_val","title":"configured_attr_val","description":"Methods on configured target node\'s attributes."},"generated/bxl/configured_sub_target":{"id":"generated/bxl/configured_sub_target","title":"configured_sub_target","description":"Members"},"generated/bxl/cqueryctx":{"id":"generated/bxl/cqueryctx","title":"cqueryctx","description":"The context for performing cquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command."},"generated/bxl/ensured_artifact":{"id":"generated/bxl/ensured_artifact","title":"ensured_artifact","description":"An artifact that will be materialized to buck-out at the end of the bxl invocation. These artifacts can be printed to bxl\'s results. Doing so will print the path of the artifact rather than the standard representation."},"generated/bxl/ensured_artifact_group":{"id":"generated/bxl/ensured_artifact_group","title":"ensured_artifact_group","description":"An artifact group that will be materialized to buck-out at the end of the bxl invocation. These artifacts can be printed to bxl\'s results. Doing so will print the path of each artifact in the group rather than the standard representation."},"generated/bxl/fs":{"id":"generated/bxl/fs","title":"fs","description":"Provides some basic tracked filesystem access for bxl functions so that they can meaningfully detect simple properties of artifacts, and source directories."},"generated/bxl/get_path_without_materialization":{"id":"generated/bxl/get_path_without_materialization","title":"get_path_without_materialization","description":"Members"},"generated/bxl/get_paths_without_materialization":{"id":"generated/bxl/get_paths_without_materialization","title":"get_paths_without_materialization","description":"Members"},"generated/bxl/instant":{"id":"generated/bxl/instant","title":"instant","description":"Instant methods, to aid in debugging/timing individual pieces of the bxl script."},"generated/bxl/lazy_attrs":{"id":"generated/bxl/lazy_attrs","title":"lazy_attrs","description":"The context for getting attrs lazily on a StarlarkConfiguredTargetNode."},"generated/bxl/lazy_resolved_attrs":{"id":"generated/bxl/lazy_resolved_attrs","title":"lazy_resolved_attrs","description":"The context for getting resolved attrs lazily on a StarlarkConfiguredTargetNode."},"generated/bxl/sub_target":{"id":"generated/bxl/sub_target","title":"sub_target","description":"Members"},"generated/bxl/target_node":{"id":"generated/bxl/target_node","title":"target_node","description":"Members"},"generated/bxl/target_set":{"id":"generated/bxl/target_set","title":"target_set","description":"Members"},"generated/bxl/unconfigured_target_node":{"id":"generated/bxl/unconfigured_target_node","title":"unconfigured_target_node","description":"Methods for unconfigured target node."},"generated/bxl/uqueryctx":{"id":"generated/bxl/uqueryctx","title":"uqueryctx","description":"The context for performing uquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command."},"generated/native/Artifact":{"id":"generated/native/Artifact","title":"Artifact","description":"A single input or output for an action","sidebar":"manualSidebar"},"generated/native/build":{"id":"generated/native/build","title":"build","description":"Members","sidebar":"manualSidebar"},"generated/native/builtins":{"id":"generated/native/builtins","title":"builtins","description":"Members","sidebar":"manualSidebar"},"generated/native/cmd_args":{"id":"generated/native/cmd_args","title":"cmd_args","description":"Members","sidebar":"manualSidebar"},"generated/native/ctx":{"id":"generated/native/ctx","title":"ctx","description":"Members","sidebar":"manualSidebar"},"generated/native/ctx.actions":{"id":"generated/native/ctx.actions","title":"ctx.actions","description":"Members","sidebar":"manualSidebar"},"generated/native/extension/function":{"id":"generated/native/extension/function","title":"function","description":"Members","sidebar":"manualSidebar"},"generated/native/extension/regex":{"id":"generated/native/extension/regex","title":"regex","description":"Members","sidebar":"manualSidebar"},"generated/native/label":{"id":"generated/native/label","title":"label","description":"Members","sidebar":"manualSidebar"},"generated/native/promise":{"id":"generated/native/promise","title":"promise","description":"Members","sidebar":"manualSidebar"},"generated/native/providers/ConfigurationInfo":{"id":"generated/native/providers/ConfigurationInfo","title":"ConfigurationInfo","description":"Provider that signals that a rule contains configuration info. This is used both as part of defining configurations (platform(), constraintvalue()) and defining whether a target \\"matches\\" a configuration or not (configsetting(), constraint_value())","sidebar":"manualSidebar"},"generated/native/providers/ConstraintSettingInfo":{"id":"generated/native/providers/ConstraintSettingInfo","title":"ConstraintSettingInfo","description":"Provider that signals that a target can be used as a constraint key. This is the only provider returned by a constraint_setting() target.","sidebar":"manualSidebar"},"generated/native/providers/ConstraintValueInfo":{"id":"generated/native/providers/ConstraintValueInfo","title":"ConstraintValueInfo","description":"Provider that signals that a target can be used as a constraint key. This is the only provider returned by a constraint_value() target.","sidebar":"manualSidebar"},"generated/native/providers/DefaultInfo":{"id":"generated/native/providers/DefaultInfo","title":"DefaultInfo","description":"A provider that all rules\' implementations must return","sidebar":"manualSidebar"},"generated/native/providers/ExecutionPlatformInfo":{"id":"generated/native/providers/ExecutionPlatformInfo","title":"ExecutionPlatformInfo","description":"Provider that signals that a target represents an execution platform.","sidebar":"manualSidebar"},"generated/native/providers/ExecutionPlatformRegistrationInfo":{"id":"generated/native/providers/ExecutionPlatformRegistrationInfo","title":"ExecutionPlatformRegistrationInfo","description":"Provider that gives the list of all execution platforms available for this build.","sidebar":"manualSidebar"},"generated/native/providers/ExternalRunnerTestInfo":{"id":"generated/native/providers/ExternalRunnerTestInfo","title":"ExternalRunnerTestInfo","description":"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests.","sidebar":"manualSidebar"},"generated/native/providers/InstallInfo":{"id":"generated/native/providers/InstallInfo","title":"InstallInfo","description":"Members","sidebar":"manualSidebar"},"generated/native/providers/PlatformInfo":{"id":"generated/native/providers/PlatformInfo","title":"PlatformInfo","description":"Members","sidebar":"manualSidebar"},"generated/native/providers/RunInfo":{"id":"generated/native/providers/RunInfo","title":"RunInfo","description":"Provider that signals that a rule is runnable","sidebar":"manualSidebar"},"generated/native/providers/TemplatePlaceholderInfo":{"id":"generated/native/providers/TemplatePlaceholderInfo","title":"TemplatePlaceholderInfo","description":"A provider that is used for expansions in string attribute templates","sidebar":"manualSidebar"},"generated/native/standard/dict":{"id":"generated/native/standard/dict","title":"dict","description":"Members","sidebar":"manualSidebar"},"generated/native/standard/list":{"id":"generated/native/standard/list","title":"list","description":"Members","sidebar":"manualSidebar"},"generated/native/standard/string":{"id":"generated/native/standard/string","title":"string","description":"Members","sidebar":"manualSidebar"},"generated/starlark_rust_docs/environment":{"id":"generated/starlark_rust_docs/environment","title":"Environments","description":"Some of the information within this page is outdated. However, the explanation of the problem, and thought process behind it, remains useful. The storage of values is similar but implemented using different types.","sidebar":"manualSidebar"},"generated/starlark_rust_docs/gc":{"id":"generated/starlark_rust_docs/gc","title":"A Moving Garbage Collector","description":"This page describes a two-space garbage collector that can deal with cycles.","sidebar":"manualSidebar"},"generated/starlark_rust_docs/heaps":{"id":"generated/starlark_rust_docs/heaps","title":"Heaps and Heap References","description":"Heaps","sidebar":"manualSidebar"},"generated/starlark_rust_docs/types":{"id":"generated/starlark_rust_docs/types","title":"Starlark Types","description":"The Starlark \'types\' extension is highly experimental and likely to be modified in the future.","sidebar":"manualSidebar"},"generated/starlark_rust_docs/values":{"id":"generated/starlark_rust_docs/values","title":"Value Representation","description":"Some of the information in this page is outdated. However, the explanation of the problem, and thought process behind it, remains useful. Of particular note is that a garbage collected heap is now used for Value.","sidebar":"manualSidebar"},"generated/starlark/prelude/prelude.bzl":{"id":"generated/starlark/prelude/prelude.bzl","title":"prelude.bzl","description":"native","sidebar":"manualSidebar"},"getting_started":{"id":"getting_started","title":"Getting Started","description":"* Download the binary","sidebar":"manualSidebar"},"index":{"id":"index","title":"Introduction","description":"Welcome to Buck2, a large scale, fast, reliable, and extensible build tool developed and used by Meta, which supports a variety of languages on many platforms.","sidebar":"manualSidebar"},"legacy/about/faq":{"id":"legacy/about/faq","title":"FAQ","description":"Q: Why is it called Buck?"},"legacy/about/fast":{"id":"legacy/about/fast","title":"What Makes Buck so Fast?","description":"Buck exploits a number of strategies to reduce build times."},"legacy/about/performance":{"id":"legacy/about/performance","title":"Performance Tuning","description":"Performance Tuning Your Builds"},"legacy/about/troubleshooting":{"id":"legacy/about/troubleshooting","title":"Troubleshooting","description":"If Buck stops working, then there are several things that you can try to do to fix it."},"legacy/basics/cheatsheet":{"id":"legacy/basics/cheatsheet","title":"Buck Cheat Sheet","description":"This section provides example command lines that you can use to obtain information about Buck and about your build. These techniques can help you to understand how your build works and to troubleshoot issues with your build."},"legacy/basics/getting-started":{"id":"legacy/basics/getting-started","title":"Getting Started","description":"Note: If you are a member of an organization that is using Buck, please consult with your colleagues to see if your organization has site-specific documentation for Buck. Buck is flexible and configurable, and many organizations have created their own Buck documentation, which is specific to their use cases\u2014in addition to the documentation here."},"legacy/basics/key-concepts":{"id":"legacy/basics/key-concepts","title":"Key concepts","description":"Buck has a number of fundamental concepts:"},"legacy/basics/tutorials":{"id":"legacy/basics/tutorials","title":"Tutorials","description":"This expanded tutorial shows extended concepts about using Buck to build a project after you have installed Buck, including creating a project, building a project, packaging a project, etc."},"legacy/concepts/buck-daemon":{"id":"legacy/concepts/buck-daemon","title":"Buck Daemon (buckd)","description":"The first time that you run a Buck command, Buck starts a daemon process for the current project in the current working directory. For subsequent commands, Buck checks for the running daemon process and if found, uses the daemon to execute the command. Using the Buck daemon can save significant time as it enables Buck to take advantage of caches for build-file parsing, and for Buck\'s target graph and action graph."},"legacy/concepts/build-file":{"id":"legacy/concepts/build-file","title":"Build File","description":"A build file is a file, typically named BUCK, that defines one or more build rules."},"legacy/concepts/build-rule":{"id":"legacy/concepts/build-rule","title":"Build Rule","description":"A build rule is a procedure for producing output files from a set of input files in the context of a specified build configuration. Build rules are specified in build files\u2014typically named BUCK."},"legacy/concepts/build-target":{"id":"legacy/concepts/build-target","title":"Build Target","description":"A build target is a string that identifies a build rule in your project. Build targets are used as arguments to Buck commands, such as buck build and buck run. Build targets are also used as arguments to build rules to enable one build rule to reference another. For example, a build rule might use a build target to reference another rule in order to specify that rule as a dependency."},"legacy/concepts/build-target-pattern":{"id":"legacy/concepts/build-target-pattern","title":"Build Target Pattern","description":"A build target pattern is a string that describes a set of one or more build targets. You can use build target patterns as arguments to commands, such as buck build and buck query. You can also use build target patterns in the Visibility argument of your build rules."},"legacy/concepts/visibility":{"id":"legacy/concepts/visibility","title":"Visibility","description":"Visibility determines whether a build rule can include a build target in its list of deps. In a large project, you may want to prevent developers from \\"reaching across\\" the project and pulling in additional code. Reducing the visibility of build rules can help prevent that type of behavior."},"legacy/files-and-directories/buck-out":{"id":"legacy/files-and-directories/buck-out","title":"buck-out","description":"Buck stores build artifacts in a directory named buck-out in the root of your project."},"legacy/files-and-directories/dot-buckconfig":{"id":"legacy/files-and-directories/dot-buckconfig","title":".buckconfig","description":"The root of your project must contain a configuration file named .buckconfig. Before executing, Buck reads this file to incorporate any customizations it specifies."},"legacy/README":{"id":"legacy/README","title":"buck 1 Documentation Import","description":"This folder contains documentation pulled from the Buck 1 website at https://buck.build/."},"rfcs/audit_visibility":{"id":"rfcs/audit_visibility","title":"`buck2 audit visibility` command","description":"Context"},"rfcs/bxl":{"id":"rfcs/bxl","title":"Buck Extension Language (BXL)","description":"Buck2 will allow more complex introspection and interaction with its graphs via the bxl feature."},"rfcs/bxl-analysis":{"id":"rfcs/bxl-analysis","title":"Bxl support for performing analysis on targets","description":"Intro"},"rfcs/configured-alias":{"id":"rfcs/configured-alias","title":"Buck support to implement `configured_alias`","description":"Intro"},"rfcs/drafts/bxl-actions":{"id":"rfcs/drafts/bxl-actions","title":"Bxl Actions and Build API","description":"Bxl allows integrators to write Starlark snippets that introspect the buck2 graph,"},"rfcs/drafts/configuration-at-syntax":{"id":"rfcs/drafts/configuration-at-syntax","title":"@configuration syntax","description":"What"},"rfcs/drafts/digest-kinds":{"id":"rfcs/drafts/digest-kinds","title":"Digest Kinds","description":"Use cases:"},"rfcs/drafts/test-info-v2":{"id":"rfcs/drafts/test-info-v2","title":"RFC: TestInfo v2","description":"A stub RFC for TestInfo v2 to track lessons learned about TestInfo v1. The"},"rfcs/implemented/provider-collection-at":{"id":"rfcs/implemented/provider-collection-at","title":"Return error in `ProviderCollection[]` on undeclared provider","description":"Currently, ctx.attrs.foo[UnknownInfo] returns None if foo is"},"rfcs/package-local-values":{"id":"rfcs/package-local-values","title":"Package-local values","description":"This RFC proposes to extend buck2 Starlark with package-local values."},"rule_authors/alias":{"id":"rule_authors/alias","title":"Alias","description":"The alias rule creates another name by which an existing rule can be referred to. There two variants: versionedalias and configuredalias, which are detailed below.","sidebar":"manualSidebar"},"rule_authors/anon_targets":{"id":"rule_authors/anon_targets","title":"Anonymous Targets","description":"An anonymous target is defined by the hash of its attributes, rather than its name. During analysis, rules can define and access the providers of anonymous targets before producing their own providers. Two distinct rules might ask for the same anonymous target, sharing the work it performs.","sidebar":"manualSidebar"},"rule_authors/configuration_transitions":{"id":"rule_authors/configuration_transitions","title":"Configuration Transitions","description":"Configuration transition is a mechanism for changing the configuration when depending on a target.","sidebar":"manualSidebar"},"rule_authors/configurations":{"id":"rule_authors/configurations","title":"Configurations","description":"This doc focuses mostly on how configurations and related features are implemented. For","sidebar":"manualSidebar"},"rule_authors/dep_files":{"id":"rule_authors/dep_files","title":"Dep Files","description":"Dep files allow commands to declare which subset of their inputs were used when the command executed.","sidebar":"manualSidebar"},"rule_authors/dynamic_dependencies":{"id":"rule_authors/dynamic_dependencies","title":"Dynamic Dependencies","description":"Dynamic dependencies allow a rule to use information that was not available when the rule was first run at analysis time. Dynamic dependencies in Buck2 are implemented using dynamic_output and are restricted in their power compared to fully generic dynamic dependencies.","sidebar":"manualSidebar"},"rule_authors/incremental_actions":{"id":"rule_authors/incremental_actions","title":"Incremental Actions","description":"It\'s possible to make certain Buck2 actions behave incrementally, that is, to produce results for a current invocation based on the result from the previous run. Incrementality could significantly improve performance of some actions such as packaging (such as Apple App Bundles) or linking (MSVC incremental linking).","sidebar":"manualSidebar"},"rule_authors/optimization":{"id":"rule_authors/optimization","title":"Optimization","description":"Optimization involves the use of techniques for determining and improving the performance of Buck2 and specific actions performed by Buck2. This page covers the internals for developers of Buck2 and provides details of Starlark that are likely to be relevant to end users.","sidebar":"manualSidebar"},"rule_authors/rule_api":{"id":"rule_authors/rule_api","title":"Rule APIs","description":"When implementing a rule, you are given a value of type context and are expected to produce providers. This document lays out the types reachable from that.","sidebar":"manualSidebar"},"rule_authors/test_execution":{"id":"rule_authors/test_execution","title":"Test Execution","description":"Test execution in Buck2 is a collaboration with Tpx, Meta\'s internal test runner.","sidebar":"manualSidebar"},"rule_authors/transitive_sets":{"id":"rule_authors/transitive_sets","title":"Transitive Sets","description":"Transitive sets enable the propogation of data up dependency trees in a manner that is both efficient in Starlark code (low cost of creation, low memory usage) and efficient for execution by Buck (edges can be shared instead of having each action depend directly on all its inputs).","sidebar":"manualSidebar"},"rule_authors/writing_rules":{"id":"rule_authors/writing_rules","title":"Writing Rules","description":"This page describes how to write rules for Buck2 and explains the flow for implementing rules that are already defined in Buck1.","sidebar":"manualSidebar"},"why":{"id":"why","title":"Why Buck2","description":"Buck2 is a build system from Meta. This page answers the questions: why does Buck2 exist, what\'s different about Buck2, and why use Buck2.","sidebar":"manualSidebar"}}}')}}]);