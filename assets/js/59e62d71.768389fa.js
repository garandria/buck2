"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4713],{3905:(e,n,l)=>{l.r(n),l.d(n,{MDXContext:()=>p,MDXProvider:()=>i,mdx:()=>_,useMDXComponents:()=>u,withMDXComponents:()=>s});var t=l(67294);function a(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function d(){return d=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var l=arguments[n];for(var t in l)Object.prototype.hasOwnProperty.call(l,t)&&(e[t]=l[t])}return e},d.apply(this,arguments)}function r(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,t)}return l}function o(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?r(Object(l),!0).forEach((function(n){a(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function m(e,n){if(null==e)return{};var l,t,a=function(e,n){if(null==e)return{};var l,t,a={},d=Object.keys(e);for(t=0;t<d.length;t++)l=d[t],n.indexOf(l)>=0||(a[l]=e[l]);return a}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(t=0;t<d.length;t++)l=d[t],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var p=t.createContext({}),s=function(e){return function(n){var l=u(n.components);return t.createElement(e,d({},n,{components:l}))}},u=function(e){var n=t.useContext(p),l=n;return e&&(l="function"==typeof e?e(n):o(o({},n),e)),l},i=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var l=e.components,a=e.mdxType,d=e.originalType,r=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),s=u(l),i=a,c=s["".concat(r,".").concat(i)]||s[i]||x[i]||d;return l?t.createElement(c,o(o({ref:n},p),{},{components:l})):t.createElement(c,o({ref:n},p))}));function _(e,n){var l=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var d=l.length,r=new Array(d);r[0]=y;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o[c]="string"==typeof e?e:a,r[1]=o;for(var p=2;p<d;p++)r[p]=l[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,l)}y.displayName="MDXCreateElement"},79789:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>p});var t=l(87462),a=(l(67294),l(3905));const d={},r="build",o={unversionedId:"generated/native/build",id:"generated/native/build",title:"build",description:"Members",source:"@site/../docs/generated/native/build.md",sourceDirName:"generated/native",slug:"/generated/native/build",permalink:"/docs/generated/native/build",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"Artifact",permalink:"/docs/generated/native/Artifact"},next:{title:"builtins",permalink:"/docs/generated/native/builtins"}},m={},p=[{value:"Members",id:"members",level:3},{value:"CommandExecutorConfig",id:"commandexecutorconfig",level:2},{value:"cmd_args",id:"cmd_args",level:2},{value:"dedupe",id:"dedupe",level:2},{value:"get_base_path",id:"get_base_path",level:2},{value:"get_cell_name",id:"get_cell_name",level:2},{value:"glob",id:"glob",level:2},{value:"host_info",id:"host_info",level:2},{value:"implicit_package_symbol",id:"implicit_package_symbol",level:2},{value:"load_symbols",id:"load_symbols",level:2},{value:"oncall",id:"oncall",level:2},{value:"package",id:"package",level:2},{value:"package_name",id:"package_name",level:2},{value:"provider",id:"provider",level:2},{value:"read_config",id:"read_config",level:2},{value:"read_package_value",id:"read_package_value",level:2},{value:"Details",id:"details",level:3},{value:"read_root_config",id:"read_root_config",level:2},{value:"regex_match",id:"regex_match",level:2},{value:"repository_name",id:"repository_name",level:2},{value:"rule",id:"rule",level:2},{value:"rule_exists",id:"rule_exists",level:2},{value:"select",id:"select",level:2},{value:"select_equal_internal",id:"select_equal_internal",level:2},{value:"select_map",id:"select_map",level:2},{value:"select_test",id:"select_test",level:2},{value:"sha256",id:"sha256",level:2},{value:"transition",id:"transition",level:2},{value:"transitive_set",id:"transitive_set",level:2},{value:"warning",id:"warning",level:2},{value:"write_package_value",id:"write_package_value",level:2}],s={toc:p};function u(e){let{components:n,...l}=e;return(0,a.mdx)("wrapper",(0,t.Z)({},s,l,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"build"},"build"),(0,a.mdx)("h3",{id:"members"},"Members"),(0,a.mdx)("table",{class:"starlark_table starlark_members_table"},(0,a.mdx)("thead",null,(0,a.mdx)("tr",null,(0,a.mdx)("th",null,"Member"),(0,a.mdx)("th",null,"Description"),(0,a.mdx)("th",null,"Type"))),(0,a.mdx)("tbody",null,(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"CommandExecutorConfig")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    local_enabled: bool.type,\n  remote_enabled: bool.type,\n  *,\n  remote_cache_enabled: [None, bool.type] = None,\n  remote_execution_properties: "" = None,\n  remote_execution_action_key: "" = None,\n  remote_execution_max_input_files_mebibytes: [None, int.type] = None,\n  remote_execution_queue_time_threshold_s: [None, int.type] = None,\n  remote_execution_use_case: "" = None,\n  use_limited_hybrid: bool.type = None,\n  allow_limited_hybrid_fallbacks: bool.type = None,\n  allow_hybrid_fallbacks_on_failure: bool.type = None,\n  use_windows_path_separators: bool.type = None,\n  allow_cache_uploads: bool.type = None,\n  max_cache_upload_mebibytes: [None, int.type] = None,\n  experimental_low_pass_filter: bool.type = None,\n  remote_output_paths: [None, str.type] = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"cmd_args")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    *args: UNKNOWN,\n  delimiter: [None, str.type] = None,\n  format: [None, str.type] = None,\n  prepend: [None, str.type] = None,\n  quote: [None, str.type] = None\n) -> "cmd_args"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"dedupe")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Remove duplicates in a list. Uses identity of value (pointer), rather than by equality.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    val: ""\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"get_base_path")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"get_cell_name")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"glob")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    include: [str.type],\n  *,\n  exclude: [None, [str.type]] = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"host_info")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'() -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"implicit_package_symbol")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    name: str.type,\n  default: [None, ""] = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"load_symbols")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    symbols: {"": ""}\n) -> None\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"oncall")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Called in a ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file to declare the oncall contact details for all the targets defined. Must be called at most once, before any targets have been declared. Errors if called from a ",(0,a.mdx)("inlineCode",{parentName:"p"},".bzl")," file.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    name: str.type\n) -> None\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"package")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    *,\n  inherit: bool.type = None,\n  visibility: [str.type] = None,\n  within_view: [str.type] = None\n) -> None\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"package_name")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"provider")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    doc: str.type = None,\n  fields: [[str.type], {str.type: str.type}]\n) -> "provider_callable"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"read_config")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    section: str.type,\n  key: str.type,\n  default: [None, ""] = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"read_package_value")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Read value specified in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    key: str.type\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"read_root_config")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    section: str.type,\n  key: str.type,\n  default: [None, str.type] = None\n) -> [None, str.type]\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"regex_match")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    regex: str.type,\n  str: str.type\n) -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"repository_name")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rule")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    *,\n  impl: "",\n  attrs: {str.type: "attribute"},\n  cfg: [None, ""] = None,\n  doc: str.type = None,\n  is_configuration_rule: bool.type = None,\n  is_toolchain_rule: bool.type = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rule_exists")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,'This should be called "target exists", not "rule exists" (if this should exist at all).')),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    name: str.type\n) -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"select")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    d: ""\n) -> "selector"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"select_equal_internal")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Tests that two selects are equal to each other. For testing use only.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    left: "",\n  right: ""\n) -> bool.type\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"select_map")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Applies a mapping function to a selector. See ","[StarlarkSelector::select_map]",".")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    d: "",\n  func: ""\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"select_test")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Applies a test function to a selector. See ","[StarlarkSelector::select_test]",".")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    d: "",\n  func: ""\n) -> bool.type\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"sha256")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Computes a sha256 digest for a string. Returns the hex representation of the digest.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    val: str.type\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"transition")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    *,\n  impl: "",\n  refs: {str.type: str.type},\n  attrs: [None, [str.type]] = None,\n  split: bool.type = None\n) -> "transition"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"transitive_set")),(0,a.mdx)("td",null),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    args_projections: [None, {str.type: ""}] = None,\n  json_projections: [None, {str.type: ""}] = None,\n  reductions: [None, {str.type: ""}] = None\n) -> "transitive_set_definition"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"warning")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Produce a warning.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    x: str.type\n) -> None\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"write_package_value")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Set the value to be accessible in the nested ",(0,a.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    key: str.type,\n  value: "",\n  *,\n  overwrite: bool.type = None\n) -> None\n')))))),(0,a.mdx)("h2",{id:"commandexecutorconfig"},"CommandExecutorConfig"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def CommandExecutorConfig(\n    local_enabled: bool.type,\n  remote_enabled: bool.type,\n  *,\n  remote_cache_enabled: [None, bool.type] = None,\n  remote_execution_properties: "" = None,\n  remote_execution_action_key: "" = None,\n  remote_execution_max_input_files_mebibytes: [None, int.type] = None,\n  remote_execution_queue_time_threshold_s: [None, int.type] = None,\n  remote_execution_use_case: "" = None,\n  use_limited_hybrid: bool.type = None,\n  allow_limited_hybrid_fallbacks: bool.type = None,\n  allow_hybrid_fallbacks_on_failure: bool.type = None,\n  use_windows_path_separators: bool.type = None,\n  allow_cache_uploads: bool.type = None,\n  max_cache_upload_mebibytes: [None, int.type] = None,\n  experimental_low_pass_filter: bool.type = None,\n  remote_output_paths: [None, str.type] = None\n) -> ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cmd_args"},"cmd_args"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args(*args: UNKNOWN, delimiter: [None, str.type] = None, format: [None, str.type] = None, prepend: [None, str.type] = None, quote: [None, str.type] = None) -> "cmd_args"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"dedupe"},"dedupe"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def dedupe(val: "") -> ""\n')),(0,a.mdx)("p",null,"Remove duplicates in a list. Uses identity of value (pointer), rather than by equality."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"get_base_path"},"get_base_path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def get_base_path() -> str.type\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"get_cell_name"},"get_cell_name"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def get_cell_name() -> str.type\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"glob"},"glob"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def glob(include: [str.type], *, exclude: [None, [str.type]] = None) -> ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"host_info"},"host_info"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def host_info() -> ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"implicit_package_symbol"},"implicit_package_symbol"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def implicit_package_symbol(name: str.type, default: [None, ""] = None) -> ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"load_symbols"},"load_symbols"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def load_symbols(symbols: {"": ""}) -> None\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"oncall"},"oncall"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def oncall(name: str.type) -> None\n")),(0,a.mdx)("p",null,"Called in a ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file to declare the oncall contact details for all the targets defined. Must be called at most once, before any targets have been declared. Errors if called from a ",(0,a.mdx)("inlineCode",{parentName:"p"},".bzl")," file."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"package"},"package"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def package(*, inherit: bool.type = None, visibility: [str.type] = None, within_view: [str.type] = None) -> None\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"package_name"},"package_name"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def package_name() -> str.type\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"provider"},"provider"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def provider(doc: str.type = None, fields: [[str.type], {str.type: str.type}]) -> "provider_callable"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"read_config"},"read_config"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def read_config(section: str.type, key: str.type, default: [None, ""] = None) -> ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"read_package_value"},"read_package_value"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def read_package_value(key: str.type) -> ""\n')),(0,a.mdx)("p",null,"Read value specified in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," file."),(0,a.mdx)("h3",{id:"details"},"Details"),(0,a.mdx)("p",null,"Returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None")," if value is not set."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"read_root_config"},"read_root_config"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def read_root_config(section: str.type, key: str.type, default: [None, str.type] = None) -> [None, str.type]\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"regex_match"},"regex_match"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def regex_match(regex: str.type, str: str.type) -> bool.type\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"repository_name"},"repository_name"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def repository_name() -> str.type\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rule"},"rule"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def rule(\n    *,\n  impl: "",\n  attrs: {str.type: "attribute"},\n  cfg: [None, ""] = None,\n  doc: str.type = None,\n  is_configuration_rule: bool.type = None,\n  is_toolchain_rule: bool.type = None\n) -> ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rule_exists"},"rule_exists"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def rule_exists(name: str.type) -> bool.type\n")),(0,a.mdx)("p",null,'This should be called "target exists", not "rule exists" (if this should exist at all).'),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"select"},"select"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def select(d: "") -> "selector"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"select_equal_internal"},"select_equal_internal"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def select_equal_internal(left: "", right: "") -> bool.type\n')),(0,a.mdx)("p",null,"Tests that two selects are equal to each other. For testing use only."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"select_map"},"select_map"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def select_map(d: "", func: "") -> ""\n')),(0,a.mdx)("p",null,"Applies a mapping function to a selector. See ","[StarlarkSelector::select_map]","."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"select_test"},"select_test"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def select_test(d: "", func: "") -> bool.type\n')),(0,a.mdx)("p",null,"Applies a test function to a selector. See ","[StarlarkSelector::select_test]","."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"sha256"},"sha256"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def sha256(val: str.type) -> str.type\n")),(0,a.mdx)("p",null,"Computes a sha256 digest for a string. Returns the hex representation of the digest."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"transition"},"transition"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def transition(*, impl: "", refs: {str.type: str.type}, attrs: [None, [str.type]] = None, split: bool.type = None) -> "transition"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"transitive_set"},"transitive_set"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def transitive_set(args_projections: [None, {str.type: ""}] = None, json_projections: [None, {str.type: ""}] = None, reductions: [None, {str.type: ""}] = None) -> "transitive_set_definition"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"warning"},"warning"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def warning(x: str.type) -> None\n")),(0,a.mdx)("p",null,"Produce a warning."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"write_package_value"},"write_package_value"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def write_package_value(key: str.type, value: "", *, overwrite: bool.type = None) -> None\n')),(0,a.mdx)("p",null,"Set the value to be accessible in the nested ",(0,a.mdx)("inlineCode",{parentName:"p"},"PACKAGE")," files."))}u.isMDXComponent=!0}}]);