"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3269],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>o});var l=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(){return d=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e},d.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},d=Object.keys(e);for(l=0;l<d.length;l++)t=d[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(l=0;l<d.length;l++)t=d[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=l.createContext({}),o=function(e){return function(n){var t=m(n.components);return l.createElement(e,d({},n,{components:t}))}},m=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=m(e.components);return l.createElement(p.Provider,{value:n},e.children)},u="mdxType",x={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},h=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,d=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),o=m(t),c=a,u=o["".concat(r,".").concat(c)]||o[c]||x[c]||d;return t?l.createElement(u,i(i({ref:n},p),{},{components:t})):l.createElement(u,i({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var d=t.length,r=new Array(d);r[0]=h;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:a,r[1]=i;for(var p=2;p<d;p++)r[p]=t[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}h.displayName="MDXCreateElement"},52596:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>p});var l=t(87462),a=(t(67294),t(3905));const d={},r="string",i={unversionedId:"generated/native/standard/string",id:"generated/native/standard/string",title:"string",description:"Members",source:"@site/../docs/generated/native/standard/string.md",sourceDirName:"generated/native/standard",slug:"/generated/native/standard/string",permalink:"/docs/generated/native/standard/string",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"list",permalink:"/docs/generated/native/standard/list"},next:{title:"Transitive Sets",permalink:"/docs/rule_authors/transitive_sets"}},s={},p=[{value:"Members",id:"members",level:3},{value:"capitalize",id:"capitalize",level:2},{value:"Details",id:"details",level:3},{value:"codepoints",id:"codepoints",level:2},{value:"Details",id:"details-1",level:3},{value:"count",id:"count",level:2},{value:"Details",id:"details-2",level:3},{value:"elems",id:"elems",level:2},{value:"Details",id:"details-3",level:3},{value:"endswith",id:"endswith",level:2},{value:"Details",id:"details-4",level:3},{value:"find",id:"find",level:2},{value:"Details",id:"details-5",level:3},{value:"format",id:"format",level:2},{value:"Details",id:"details-6",level:3},{value:"index",id:"index",level:2},{value:"Details",id:"details-7",level:3},{value:"isalnum",id:"isalnum",level:2},{value:"Details",id:"details-8",level:3},{value:"isalpha",id:"isalpha",level:2},{value:"Details",id:"details-9",level:3},{value:"isdigit",id:"isdigit",level:2},{value:"Details",id:"details-10",level:3},{value:"islower",id:"islower",level:2},{value:"Details",id:"details-11",level:3},{value:"isspace",id:"isspace",level:2},{value:"Details",id:"details-12",level:3},{value:"istitle",id:"istitle",level:2},{value:"Details",id:"details-13",level:3},{value:"isupper",id:"isupper",level:2},{value:"Details",id:"details-14",level:3},{value:"join",id:"join",level:2},{value:"Details",id:"details-15",level:3},{value:"lower",id:"lower",level:2},{value:"Details",id:"details-16",level:3},{value:"lstrip",id:"lstrip",level:2},{value:"Details",id:"details-17",level:3},{value:"partition",id:"partition",level:2},{value:"Details",id:"details-18",level:3},{value:"removeprefix",id:"removeprefix",level:2},{value:"Details",id:"details-19",level:3},{value:"removesuffix",id:"removesuffix",level:2},{value:"Details",id:"details-20",level:3},{value:"replace",id:"replace",level:2},{value:"Details",id:"details-21",level:3},{value:"rfind",id:"rfind",level:2},{value:"Details",id:"details-22",level:3},{value:"rindex",id:"rindex",level:2},{value:"Details",id:"details-23",level:3},{value:"rpartition",id:"rpartition",level:2},{value:"Details",id:"details-24",level:3},{value:"rsplit",id:"rsplit",level:2},{value:"Details",id:"details-25",level:3},{value:"rstrip",id:"rstrip",level:2},{value:"Details",id:"details-26",level:3},{value:"split",id:"split",level:2},{value:"Details",id:"details-27",level:3},{value:"splitlines",id:"splitlines",level:2},{value:"Details",id:"details-28",level:3},{value:"startswith",id:"startswith",level:2},{value:"Details",id:"details-29",level:3},{value:"strip",id:"strip",level:2},{value:"Details",id:"details-30",level:3},{value:"title",id:"title",level:2},{value:"Details",id:"details-31",level:3},{value:"upper",id:"upper",level:2},{value:"Details",id:"details-32",level:3}],o={toc:p};function m(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,l.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"string"},"string"),(0,a.mdx)("h3",{id:"members"},"Members"),(0,a.mdx)("table",{class:"starlark_table starlark_members_table"},(0,a.mdx)("thead",null,(0,a.mdx)("tr",null,(0,a.mdx)("th",null,"Member"),(0,a.mdx)("th",null,"Description"),(0,a.mdx)("th",null,"Type"))),(0,a.mdx)("tbody",null,(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"capitalize")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"string.capitalize: returns a copy of string S, where the first character (if any) is converted to uppercase; all other characters are converted to lowercase.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"codepoints")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7codepoints"},"string.codepoints"),": returns an iterable of the unicode codepoint of a string.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> iter(str.type)\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"count")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7count"},"string.count"),": count the number of occurrences of a string in another string.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type,\n  start: [None, int.type] = None,\n  end: [None, int.type] = None\n) -> int.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"elems")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7elems"},"string.elems"),": returns an iterable of the bytes values of a string.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> iter(str.type)\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"endswith")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7endswith"},"string.endswith"),": determine if a string ends with a given suffix.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    suffix: [str.type, "tuple"]\n) -> bool.type\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"find")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7find"},"string.find"),": find a substring in a string.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type,\n  start: [None, int.type] = None,\n  end: [None, int.type] = None\n) -> int.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"format")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7format"},"string.format"),": format a string.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    *args: UNKNOWN,\n  **kwargs: UNKNOWN\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"index")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7index"},"string.index"),": search a substring inside a string, failing on not found.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type,\n  start: [None, int.type] = None,\n  end: [None, int.type] = None\n) -> int.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"isalnum")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isalnum"},"string.isalnum"),": test if a string is composed only of letters and digits.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"isalpha")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isalpha"},"string.isalpha"),": test if a string is composed only of letters.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"isdigit")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isdigit"},"string.isdigit"),": test if a string is composed only of digits.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"islower")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7islower"},"string.islower"),": test if all letters of a string are lowercase.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"isspace")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isspace"},"string.isspace"),": test if all characters of a string are whitespaces.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"istitle")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7istitle"},"string.istitle"),": test if the string is title cased.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"isupper")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isupper"},"string.isupper"),": test if all letters of a string are uppercase.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> bool.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"join")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7join"},"string.join"),": join elements with a separator.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    to_join: iter(str.type)\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"lower")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7lower"},"string.lower"),": test if all letters of a string are lowercased.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"lstrip")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7lstrip"},"string.lstrip"),": trim leading whitespaces.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    chars: [None, str.type] = None\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"partition")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7partition"},"string.partition"),": partition a string in 3 components")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type\n) -> (str.type, str.type, str.type)\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"removeprefix")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://docs.python.org/3.9/library/stdtypes.html#str.removeprefix"},"string.removeprefix"),": remove a prefix from a string. ",(0,a.mdx)("em",{parentName:"p"},"Not part of standard Starlark."))),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    prefix: str.type\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"removesuffix")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://docs.python.org/3.9/library/stdtypes.html#str.removesuffix"},"string.removesuffix"),": remove a prefix from a string. ",(0,a.mdx)("em",{parentName:"p"},"Not part of standard Starlark."))),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    suffix: str.type\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"replace")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7replace"},"string.replace"),": replace all occurences of a subtring.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    old: str.type,\n  new: str.type,\n  count: [None, int.type] = None\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rfind")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rfind"},"string.rfind"),": find the last index of a substring.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type,\n  start: [None, int.type] = None,\n  end: [None, int.type] = None\n) -> int.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rindex")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rindex"},"string.rindex"),": find the last index of a substring, failing on not found.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type,\n  start: [None, int.type] = None,\n  end: [None, int.type] = None\n) -> int.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rpartition")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rpartition"},"string.rpartition"),": partition a string in 3 elements.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    needle: str.type\n) -> (str.type, str.type, str.type)\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rsplit")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rsplit"},"string.rsplit"),": splits a string into substrings.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    sep: [None, str.type] = None,\n  maxsplit: [None, int.type] = None\n) -> [str.type]\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"rstrip")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rstrip"},"string.rstrip"),": trim trailing whitespace.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    chars: [None, str.type] = None\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"split")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7split"},"string.split"),": split a string in substrings.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    sep: [None, str.type] = None,\n  maxsplit: [None, int.type] = None\n) -> [str.type]\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"splitlines")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7splitlines"},"string.splitlines"),": return the list of lines of a string.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    keepends: bool.type = None\n) -> [str.type]\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"startswith")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7startswith"},"string.startswith"),": test wether a string starts with a given prefix.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    prefix: [str.type, "tuple"]\n) -> bool.type\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"strip")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7strip"},"string.strip"),": trim leading and trailing whitespaces.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"(\n    chars: [None, str.type] = None\n) -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"title")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7title"},"string.title"),": convert a string to title case.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"upper")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7upper"},"string.upper"),": convert a string to all uppercase.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))))),(0,a.mdx)("h2",{id:"capitalize"},"capitalize"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def capitalize() -> str.type\n")),(0,a.mdx)("p",null,"string.capitalize: returns a copy of string S, where the first character (if any) is converted to uppercase; all other characters are converted to lowercase."),(0,a.mdx)("h3",{id:"details"},"Details"),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"hello, world!".capitalize() == "Hello, world!"\n"Hello, World!".capitalize() == "Hello, world!"\n"".capitalize() == ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"codepoints"},"codepoints"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def codepoints() -> iter(str.type)\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7codepoints"},"string.codepoints"),": returns an iterable of the unicode codepoint of a string."),(0,a.mdx)("h3",{id:"details-1"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.codepoints()")," returns an iterable value containing the\nsequence of integer Unicode code points encoded by the string S.\nEach invalid code within the string is treated as if it encodes the\nUnicode replacement character, U+FFFD."),(0,a.mdx)("p",null,"By returning an iterable, not a list, the cost of decoding the string\nis deferred until actually needed; apply ",(0,a.mdx)("inlineCode",{parentName:"p"},"list(...)")," to the result to\nmaterialize the entire sequence."),(0,a.mdx)("p",null,"Example:"),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'list("Hello, \u4e16\u754c".codepoints()) == [72, 101, 108, 108, 111, 44, 32, 19990, 30028]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"count"},"count"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def count(needle: str.type, start: [None, int.type] = None, end: [None, int.type] = None) -> int.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7count"},"string.count"),": count the number of occurrences of a string in another string."),(0,a.mdx)("h3",{id:"details-2"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.count(sub[, start[, end]])")," returns the number of occcurences of\n",(0,a.mdx)("inlineCode",{parentName:"p"},"sub")," within the string S, or, if the optional substring indices\n",(0,a.mdx)("inlineCode",{parentName:"p"},"start")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"end")," are provided, within the designated substring of S.\nThey are interpreted according to Skylark's ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#indexing"},"indexing conventions"),"."),(0,a.mdx)("p",null,"This implementation does not count occurence of ",(0,a.mdx)("inlineCode",{parentName:"p"},"sub")," in the string ",(0,a.mdx)("inlineCode",{parentName:"p"},"S"),"\nthat overlap other occurence of S (which can happen if some suffix of S\nis a prefix of S). For instance, ",(0,a.mdx)("inlineCode",{parentName:"p"},'"abababa".count("aba")')," returns 2\nfor ",(0,a.mdx)("inlineCode",{parentName:"p"},"[aba]a[aba]"),", not counting the middle occurence: ",(0,a.mdx)("inlineCode",{parentName:"p"},"ab[aba]ba"),"\n(this is following Python behavior)."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"hello, world!".count("o") == 2\n"abababa".count("aba") == 2\n"hello, world!".count("o", 7, 12) == 1  # in "world"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"elems"},"elems"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def elems() -> iter(str.type)\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7elems"},"string.elems"),": returns an iterable of the bytes values of a string."),(0,a.mdx)("h3",{id:"details-3"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.elems()")," returns an iterable value containing the\nsequence of numeric bytes values in the string S."),(0,a.mdx)("p",null,"To materialize the entire sequence of bytes, apply ",(0,a.mdx)("inlineCode",{parentName:"p"},"list(...)")," to the\nresult."),(0,a.mdx)("p",null,"Example:"),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'list("Hello, \u4e16\u754c".elems()) == [\n    "H", "e", "l", "l", "o", ",", " ", "\u4e16", "\u754c"]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"endswith"},"endswith"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def endswith(suffix: [str.type, "tuple"]) -> bool.type\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7endswith"},"string.endswith"),": determine if a string ends with a given suffix."),(0,a.mdx)("h3",{id:"details-4"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.endswith(suffix)")," reports whether the string S has the specified\nsuffix."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"filename.sky".endswith(".sky") == True\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"find"},"find"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def find(needle: str.type, start: [None, int.type] = None, end: [None, int.type] = None) -> int.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7find"},"string.find"),": find a substring in a string."),(0,a.mdx)("h3",{id:"details-5"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.find(sub[, start[, end]])")," returns the index of the first\noccurrence of the substring ",(0,a.mdx)("inlineCode",{parentName:"p"},"sub")," within S."),(0,a.mdx)("p",null,"If either or both of ",(0,a.mdx)("inlineCode",{parentName:"p"},"start")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"end")," are specified,\nthey specify a subrange of S to which the search should be restricted.\nThey are interpreted according to Skylark's ",(0,a.mdx)("a",{parentName:"p",href:"#indexing"},"indexing\nconventions"),"."),(0,a.mdx)("p",null,"If no occurrence is found, ",(0,a.mdx)("inlineCode",{parentName:"p"},"found")," returns -1."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"bonbon".find("on") == 1\n"bonbon".find("on", 2) == 4\n"bonbon".find("on", 2, 5) == -1\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"format"},"format"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def format(*args: UNKNOWN, **kwargs: UNKNOWN) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7format"},"string.format"),": format a string."),(0,a.mdx)("h3",{id:"details-6"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.format(*args, **kwargs)")," returns a version of the format string S\nin which bracketed portions ",(0,a.mdx)("inlineCode",{parentName:"p"},"{...}")," are replaced\nby arguments from ",(0,a.mdx)("inlineCode",{parentName:"p"},"args")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"kwargs"),"."),(0,a.mdx)("p",null,"Within the format string, a pair of braces ",(0,a.mdx)("inlineCode",{parentName:"p"},"{{")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"}}")," is treated as\na literal open or close brace.\nEach unpaired open brace must be matched by a close brace ",(0,a.mdx)("inlineCode",{parentName:"p"},"}"),".\nThe optional text between corresponding open and close braces\nspecifies which argument to use and how to format it, and consists of\nthree components, all optional:\na field name, a conversion preceded by '",(0,a.mdx)("inlineCode",{parentName:"p"},"!"),"', and a format specifier\npreceded by '",(0,a.mdx)("inlineCode",{parentName:"p"},":"),"'."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},"{field}\n{field:spec}\n{field!conv}\n{field!conv:spec}\n")),(0,a.mdx)("p",null,"The ",(0,a.mdx)("em",{parentName:"p"},"field name")," may be either a decimal number or a keyword.\nA number is interpreted as the index of a positional argument;\na keyword specifies the value of a keyword argument.\nIf all the numeric field names form the sequence 0, 1, 2, and so on,\nthey may be omitted and those values will be implied; however,\nthe explicit and implicit forms may not be mixed."),(0,a.mdx)("p",null,"The ",(0,a.mdx)("em",{parentName:"p"},"conversion")," specifies how to convert an argument value ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," to a\nstring. It may be either ",(0,a.mdx)("inlineCode",{parentName:"p"},"!r"),", which converts the value using\n",(0,a.mdx)("inlineCode",{parentName:"p"},"repr(x)"),", or ",(0,a.mdx)("inlineCode",{parentName:"p"},"!s"),", which converts the value using ",(0,a.mdx)("inlineCode",{parentName:"p"},"str(x)")," and is\nthe default."),(0,a.mdx)("p",null,"The ",(0,a.mdx)("em",{parentName:"p"},"format specifier"),", after a colon, specifies field width,\nalignment, padding, and numeric precision.\nCurrently it must be empty, but it is reserved for future use."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-rust"},'"a {} c".format(3) == "a 3 c"\n"a{x}b{y}c{}".format(1, x=2, y=3) == "a2b3c1"\n"a{}b{}c".format(1, 2) == "a1b2c"\n"({1}, {0})".format("zero", "one") == "(one, zero)"\n"Is {0!r} {0!s}?".format("heterological") == "Is \\"heterological\\" heterological?"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"index"},"index"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def index(needle: str.type, start: [None, int.type] = None, end: [None, int.type] = None) -> int.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7index"},"string.index"),": search a substring inside a string, failing on not found."),(0,a.mdx)("h3",{id:"details-7"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.index(sub[, start[, end]])")," returns the index of the first\noccurrence of the substring ",(0,a.mdx)("inlineCode",{parentName:"p"},"sub")," within S, like ",(0,a.mdx)("inlineCode",{parentName:"p"},"S.find"),", except\nthat if the substring is not found, the operation fails."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"bonbon".index("on") == 1\n"bonbon".index("on", 2) == 4\n"bonbon".index("on", 2, 5)    # error: not found\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"isalnum"},"isalnum"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def isalnum() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isalnum"},"string.isalnum"),": test if a string is composed only of letters and digits."),(0,a.mdx)("h3",{id:"details-8"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.isalnum()")," reports whether the string S is non-empty and consists\nonly Unicode letters and digits."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"base64".isalnum() == True\n"Catch-22".isalnum() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"isalpha"},"isalpha"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def isalpha() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isalpha"},"string.isalpha"),": test if a string is composed only of letters."),(0,a.mdx)("h3",{id:"details-9"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.isalpha()")," reports whether the string S is non-empty and consists\nonly of Unicode letters."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"ABC".isalpha() == True\n"Catch-22".isalpha() == False\n"".isalpha() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"isdigit"},"isdigit"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def isdigit() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isdigit"},"string.isdigit"),": test if a string is composed only of digits."),(0,a.mdx)("h3",{id:"details-10"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.isdigit()")," reports whether the string S is non-empty and consists\nonly of Unicode digits."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"123".isdigit() == True\n"Catch-22".isdigit() == False\n"".isdigit() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"islower"},"islower"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def islower() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7islower"},"string.islower"),": test if all letters of a string are lowercase."),(0,a.mdx)("h3",{id:"details-11"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.islower()")," reports whether the string S contains at least one cased\nUnicode letter, and all such letters are lowercase."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"hello, world".islower() == True\n"Catch-22".islower() == False\n"123".islower() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"isspace"},"isspace"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def isspace() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isspace"},"string.isspace"),": test if all characters of a string are whitespaces."),(0,a.mdx)("h3",{id:"details-12"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.isspace()")," reports whether the string S is non-empty and consists\nonly of Unicode spaces."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"    ".isspace() == True\n"\\r\\t\\n".isspace() == True\n"".isspace() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"istitle"},"istitle"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def istitle() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7istitle"},"string.istitle"),": test if the string is title cased."),(0,a.mdx)("h3",{id:"details-13"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.istitle()")," reports whether the string S contains at least one cased\nUnicode letter, and all such letters that begin a word are in title\ncase."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"Hello, World!".istitle() == True\n"Catch-22".istitle() == True\n"HAL-9000".istitle() == False\n"123".istitle() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"isupper"},"isupper"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def isupper() -> bool.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7isupper"},"string.isupper"),": test if all letters of a string are uppercase."),(0,a.mdx)("h3",{id:"details-14"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.isupper()")," reports whether the string S contains at least one cased\nUnicode letter, and all such letters are uppercase."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"HAL-9000".isupper() == True\n"Catch-22".isupper() == False\n"123".isupper() == False\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"join"},"join"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def join(to_join: iter(str.type)) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7join"},"string.join"),": join elements with a separator."),(0,a.mdx)("h3",{id:"details-15"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.join(iterable)")," returns the string formed by concatenating each\nelement of its argument, with a copy of the string S between\nsuccessive elements. The argument must be an iterable whose elements\nare strings."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'", ".join([]) == ""\n", ".join(("x", )) == "x"\n", ".join(["one", "two", "three"]) == "one, two, three"\n"a".join("ctmrn".elems()) == "catamaran"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"lower"},"lower"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def lower() -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7lower"},"string.lower"),": test if all letters of a string are lowercased."),(0,a.mdx)("h3",{id:"details-16"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.lower()")," returns a copy of the string S with letters converted to\nlowercase."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"Hello, World!".lower() == "hello, world!"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"lstrip"},"lstrip"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def lstrip(chars: [None, str.type] = None) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7lstrip"},"string.lstrip"),": trim leading whitespaces."),(0,a.mdx)("h3",{id:"details-17"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.lstrip()")," returns a copy of the string S with leading whitespace removed.\nIn most cases instead of passing an argument you should use ",(0,a.mdx)("inlineCode",{parentName:"p"},"removeprefix"),"."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"  hello  ".lstrip() == "hello  "\n"x!hello  ".lstrip("!x ") == "hello  "\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"partition"},"partition"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def partition(needle: str.type) -> (str.type, str.type, str.type)\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7partition"},"string.partition"),": partition a string in 3 components"),(0,a.mdx)("h3",{id:"details-18"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},'S.partition(x = " ")')," splits string S into three parts and returns them\nas a tuple: the portion before the first occurrence of string ",(0,a.mdx)("inlineCode",{parentName:"p"},"x"),",\n",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," itself, and the portion following it.\nIf S does not contain ",(0,a.mdx)("inlineCode",{parentName:"p"},"x"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"partition")," returns ",(0,a.mdx)("inlineCode",{parentName:"p"},'(S, "", "")'),"."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"partition")," fails if ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," is not a string, or is the empty string."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"one/two/three".partition("/") == ("one", "/", "two/three")\n"one".partition("/") == ("one", "", "")\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"removeprefix"},"removeprefix"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def removeprefix(prefix: str.type) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://docs.python.org/3.9/library/stdtypes.html#str.removeprefix"},"string.removeprefix"),": remove a prefix from a string. ",(0,a.mdx)("em",{parentName:"p"},"Not part of standard Starlark.")),(0,a.mdx)("h3",{id:"details-19"},"Details"),(0,a.mdx)("p",null,"If the string starts with the prefix string, return ",(0,a.mdx)("inlineCode",{parentName:"p"},"string[len(prefix):]"),".\nOtherwise, return a copy of the original string:"),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"Hello, World!".removeprefix("Hello") == ", World!"\n"Hello, World!".removeprefix("Goodbye") == "Hello, World!"\n"Hello".removeprefix("Hello") == ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"removesuffix"},"removesuffix"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def removesuffix(suffix: str.type) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://docs.python.org/3.9/library/stdtypes.html#str.removesuffix"},"string.removesuffix"),": remove a prefix from a string. ",(0,a.mdx)("em",{parentName:"p"},"Not part of standard Starlark.")),(0,a.mdx)("h3",{id:"details-20"},"Details"),(0,a.mdx)("p",null,"If the string starts with the prefix string, return ",(0,a.mdx)("inlineCode",{parentName:"p"},"string[len(prefix):]"),".\nOtherwise, return a copy of the original string:"),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"Hello, World!".removesuffix("World!") == "Hello, "\n"Hello, World!".removesuffix("World") == "Hello, World!"\n"Hello".removesuffix("Hello") == ""\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"replace"},"replace"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def replace(old: str.type, new: str.type, count: [None, int.type] = None) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7replace"},"string.replace"),": replace all occurences of a subtring."),(0,a.mdx)("h3",{id:"details-21"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.replace(old, new[, count])")," returns a copy of string S with all\noccurrences of substring ",(0,a.mdx)("inlineCode",{parentName:"p"},"old")," replaced by ",(0,a.mdx)("inlineCode",{parentName:"p"},"new"),". If the optional\nargument ",(0,a.mdx)("inlineCode",{parentName:"p"},"count"),", which must be an ",(0,a.mdx)("inlineCode",{parentName:"p"},"int"),", is non-negative, it\nspecifies a maximum number of occurrences to replace."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"banana".replace("a", "o") == "bonono"\n"banana".replace("a", "o", 2) == "bonona"\n"banana".replace("z", "x") == "banana"\n"banana".replace("", "x") == "xbxaxnxaxnxax"\n"banana".replace("", "x", 2) == "xbxanana"\n"".replace("", "x") == "x"\n"# );\n"banana".replace("a", "o", -2)  # error: argument was negative\n"#, "argument was negative");\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rfind"},"rfind"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def rfind(needle: str.type, start: [None, int.type] = None, end: [None, int.type] = None) -> int.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rfind"},"string.rfind"),": find the last index of a substring."),(0,a.mdx)("h3",{id:"details-22"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.rfind(sub[, start[, end]])")," returns the index of the substring ",(0,a.mdx)("inlineCode",{parentName:"p"},"sub"),"\nwithin S, like ",(0,a.mdx)("inlineCode",{parentName:"p"},"S.find"),", except that ",(0,a.mdx)("inlineCode",{parentName:"p"},"rfind")," returns the index of\nthe substring's ",(0,a.mdx)("em",{parentName:"p"},"last")," occurrence."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"bonbon".rfind("on") == 4\n"bonbon".rfind("on", None, 5) == 1\n"bonbon".rfind("on", 2, 5) == -1\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rindex"},"rindex"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def rindex(needle: str.type, start: [None, int.type] = None, end: [None, int.type] = None) -> int.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rindex"},"string.rindex"),": find the last index of a substring, failing on not found."),(0,a.mdx)("h3",{id:"details-23"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.rindex(sub[, start[, end]])")," returns the index of the substring ",(0,a.mdx)("inlineCode",{parentName:"p"},"sub"),"\nwithin S, like ",(0,a.mdx)("inlineCode",{parentName:"p"},"S.index"),", except that ",(0,a.mdx)("inlineCode",{parentName:"p"},"rindex")," returns the index of\nthe substring's ",(0,a.mdx)("em",{parentName:"p"},"last")," occurrence."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"bonbon".rindex("on") == 4\n"bonbon".rindex("on", None, 5) == 1  # in "bonbo"\n"bonbon".rindex("on", 2, 5) #   error: not found\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rpartition"},"rpartition"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def rpartition(needle: str.type) -> (str.type, str.type, str.type)\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rpartition"},"string.rpartition"),": partition a string in 3 elements."),(0,a.mdx)("h3",{id:"details-24"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.rpartition([x = ' '])")," is like ",(0,a.mdx)("inlineCode",{parentName:"p"},"partition"),", but splits ",(0,a.mdx)("inlineCode",{parentName:"p"},"S")," at the\nlast occurrence of ",(0,a.mdx)("inlineCode",{parentName:"p"},"x"),"."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"one/two/three".rpartition("/") == ("one/two", "/", "three")\n"one".rpartition("/") == ("", "", "one")\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rsplit"},"rsplit"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def rsplit(sep: [None, str.type] = None, maxsplit: [None, int.type] = None) -> [str.type]\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rsplit"},"string.rsplit"),": splits a string into substrings."),(0,a.mdx)("h3",{id:"details-25"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.rsplit([sep[, maxsplit]])")," splits a string into substrings like\n",(0,a.mdx)("inlineCode",{parentName:"p"},"S.split"),", except that when a maximum number of splits is specified,\n",(0,a.mdx)("inlineCode",{parentName:"p"},"rsplit")," chooses the rightmost splits."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"banana".rsplit("n") == ["ba", "a", "a"]\n"banana".rsplit("n", 1) == ["bana", "a"]\n"one two  three".rsplit(None, 1) == ["one two", "three"]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rstrip"},"rstrip"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def rstrip(chars: [None, str.type] = None) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7rstrip"},"string.rstrip"),": trim trailing whitespace."),(0,a.mdx)("h3",{id:"details-26"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.rstrip()")," returns a copy of the string S with trailing whitespace removed.\nIn most cases instead of passing an argument you should use ",(0,a.mdx)("inlineCode",{parentName:"p"},"removesuffix"),"."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"  hello  ".rstrip() == "  hello"\n"  hello!x".rstrip(" x!") == "  hello"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"split"},"split"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def split(sep: [None, str.type] = None, maxsplit: [None, int.type] = None) -> [str.type]\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7split"},"string.split"),": split a string in substrings."),(0,a.mdx)("h3",{id:"details-27"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.split([sep [, maxsplit]])")," returns the list of substrings of S,\nsplitting at occurrences of the delimiter string ",(0,a.mdx)("inlineCode",{parentName:"p"},"sep"),"."),(0,a.mdx)("p",null,"Consecutive occurrences of ",(0,a.mdx)("inlineCode",{parentName:"p"},"sep")," are considered to delimit empty\nstrings, so ",(0,a.mdx)("inlineCode",{parentName:"p"},"'food'.split('o')")," returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"['f', '', 'd']"),".\nSplitting an empty string with a specified separator returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"['']"),".\nIf ",(0,a.mdx)("inlineCode",{parentName:"p"},"sep")," is the empty string, ",(0,a.mdx)("inlineCode",{parentName:"p"},"split")," fails."),(0,a.mdx)("p",null,"If ",(0,a.mdx)("inlineCode",{parentName:"p"},"sep")," is not specified or is ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"split")," uses a different\nalgorithm: it removes all leading spaces from S\n(or trailing spaces in the case of ",(0,a.mdx)("inlineCode",{parentName:"p"},"rsplit"),"),\nthen splits the string around each consecutive non-empty sequence of\nUnicode white space characters."),(0,a.mdx)("p",null,"If S consists only of white space, ",(0,a.mdx)("inlineCode",{parentName:"p"},"split")," returns the empty list."),(0,a.mdx)("p",null,"If ",(0,a.mdx)("inlineCode",{parentName:"p"},"maxsplit")," is given and non-negative, it specifies a maximum number\nof splits."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"one two  three".split() == ["one", "two", "three"]\n"one two  three".split(" ") == ["one", "two", "", "three"]\n"one two  three".split(None, 1) == ["one", "two  three"]\n"banana".split("n") == ["ba", "a", "a"]\n"banana".split("n", 1) == ["ba", "ana"]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"splitlines"},"splitlines"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def splitlines(keepends: bool.type = None) -> [str.type]\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7splitlines"},"string.splitlines"),": return the list of lines of a string."),(0,a.mdx)("h3",{id:"details-28"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.splitlines([keepends])")," returns a list whose elements are the\nsuccessive lines of S, that is, the strings formed by splitting S at\nline terminators ('\\n', '\\r' or '\\r\\n')."),(0,a.mdx)("p",null,"The optional argument, ",(0,a.mdx)("inlineCode",{parentName:"p"},"keepends"),", is interpreted as a Boolean.\nIf true, line terminators are preserved in the result, though\nthe final element does not necessarily end with a line terminator."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"one\\n\\ntwo".splitlines() == ["one", "", "two"]\n"one\\n\\ntwo".splitlines(True) == ["one\\n", "\\n", "two"]\n"a\\nb".splitlines() == ["a", "b"]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"startswith"},"startswith"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def startswith(prefix: [str.type, "tuple"]) -> bool.type\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7startswith"},"string.startswith"),": test wether a string starts with a given prefix."),(0,a.mdx)("h3",{id:"details-29"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.startswith(suffix)")," reports whether the string S has the specified\nprefix."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"\"filename.sky\".startswith(\"filename\") == True\n\"filename.sky\".startswith(\"sky\") == False\n'abc'.startswith(('a', 'A')) == True\n'ABC'.startswith(('a', 'A')) == True\n'def'.startswith(('a', 'A')) == False\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"strip"},"strip"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def strip(chars: [None, str.type] = None) -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7strip"},"string.strip"),": trim leading and trailing whitespaces."),(0,a.mdx)("h3",{id:"details-30"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.strip()")," returns a copy of the string S with leading and trailing\nwhitespace removed."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"  hello  ".strip() == "hello"\n"xxhello!!".strip("x!") == "hello"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"title"},"title"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def title() -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7title"},"string.title"),": convert a string to title case."),(0,a.mdx)("h3",{id:"details-31"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.lower()")," returns a copy of the string S with letters converted to\ntitlecase."),(0,a.mdx)("p",null,"Letters are converted to uppercase at the start of words, lowercase\nelsewhere."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"hElLo, WoRlD!".title() == "Hello, World!"\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"upper"},"upper"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def upper() -> str.type\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#string%C2%B7upper"},"string.upper"),": convert a string to all uppercase."),(0,a.mdx)("h3",{id:"details-32"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"S.lower()")," returns a copy of the string S with letters converted to\nlowercase."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'"Hello, World!".upper() == "HELLO, WORLD!"\n')))}m.isMDXComponent=!0}}]);