"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6193],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>s});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},r.apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=l.createContext({}),s=function(e){return function(t){var n=m(t.components);return l.createElement(e,r({},t,{components:n}))}},m=function(e){var t=l.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return l.createElement(u.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},g=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=m(n),p=a,c=s["".concat(d,".").concat(p)]||s[p]||x[p]||r;return n?l.createElement(c,i(i({ref:t},u),{},{components:n})):l.createElement(c,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,d=new Array(r);d[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:a,d[1]=i;for(var u=2;u<r;u++)d[u]=n[u];return l.createElement.apply(null,d)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},57866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var l=n(87462),a=(n(67294),n(3905));const r={},d="bxl_ctx",i={unversionedId:"generated/bxl/bxl_ctx",id:"generated/bxl/bxl_ctx",title:"bxl_ctx",description:"The bxl context that the top level bxl implementation receives as parameter. This context contains all the core bxl functions to query, build, create actions, etc.",source:"@site/../docs/generated/bxl/bxl_ctx.md",sourceDirName:"generated/bxl",slug:"/generated/bxl/bxl_ctx",permalink:"/docs/generated/bxl/bxl_ctx",draft:!1,tags:[],version:"current",frontMatter:{}},o={},u=[{value:"Members",id:"members",level:3},{value:"analysis",id:"analysis",level:2},{value:"Details",id:"details",level:3},{value:"audit",id:"audit",level:2},{value:"build",id:"build",level:2},{value:"Details",id:"details-1",level:3},{value:"bxl_actions : <code>&quot;bxl_actions&quot;</code>",id:"bxl_actions--bxl_actions",level:2},{value:"cli_args : <code>&quot;&quot;</code>",id:"cli_args--",level:2},{value:"configured_targets",id:"configured_targets",level:2},{value:"Details",id:"details-2",level:3},{value:"cquery",id:"cquery",level:2},{value:"Details",id:"details-3",level:3},{value:"cquery_legacy",id:"cquery_legacy",level:2},{value:"fs : <code>&quot;fs&quot;</code>",id:"fs--fs",level:2},{value:"output : <code>&quot;&quot;</code>",id:"output--",level:2},{value:"root",id:"root",level:2},{value:"unconfigured_targets",id:"unconfigured_targets",level:2},{value:"Details",id:"details-4",level:3},{value:"uquery",id:"uquery",level:2},{value:"uquery_legacy",id:"uquery_legacy",level:2}],s={toc:u};function m(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"bxl_ctx"},"bxl_ctx"),(0,a.mdx)("p",null,"The bxl context that the top level bxl implementation receives as parameter. This context contains all the core bxl functions to query, build, create actions, etc."),(0,a.mdx)("h3",{id:"members"},"Members"),(0,a.mdx)("table",{class:"starlark_table starlark_members_table"},(0,a.mdx)("thead",null,(0,a.mdx)("tr",null,(0,a.mdx)("th",null,"Member"),(0,a.mdx)("th",null,"Description"),(0,a.mdx)("th",null,"Type"))),(0,a.mdx)("tbody",null,(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"analysis")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Runs analysis on the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),", accepting an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," which is the target platform configuration used to resolve configurations of any unconfigured target nodes, and an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"skip_incompatible")," boolean that indicates whether to skip analysis of nodes that are incompatible with the target platform. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," is either a string that can be parsed as a target label, or a target label.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    labels: "",\n  target_platform: "" = None,\n  skip_incompatible: bool.type = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"audit")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkAuditCtx"),"]"," that holds all the audit functions.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'() -> "audit_ctx"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"build")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Runs a build on the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),", accepting an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," which is the target platform configuration used to resolve configurations.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    spec: "",\n  target_platform: "" = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"bxl_actions")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Returns the action context ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"BxlActionsCtx"),"]"," for creating and running actions.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'"bxl_actions"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"cli_args")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"A struct of the command line args as declared using the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"cli_args"),"]"," module. These command lines are resolved per the users input on the cli when invoking the bxl script.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"configured_targets")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Gets the target nodes for the ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),", accepting an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," which is the target platform configuration used to resolve configurations of any unconfigured target nodes. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," is either a string that can be parsed as a target label, or a target label.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    labels: "",\n  target_platform: "" = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"cquery")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkCQueryCtx"),"]"," that holds all the cquery functions. This function takes an optional parameter ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform"),", which is the target platform configuration used to configured any unconfigured target nodes.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    target_platform: "" = None\n) -> "cqueryctx"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"cquery_legacy")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Please do not use this at the moment. We need to fix how cell resolution is done within cquery.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    target_platform: "" = None\n) -> "cqueryctx"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"fs")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"BxlFilesystem"),"]"," for performing a basic set of filesystem operations within bxl")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'"fs"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"output")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Gets the output stream to the console via stdout. Items written to the output stream are considered to be the results of a bxl script, which will be displayed to stdout by buck2 even when the script is cached.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"root")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Returns the absolute path to the root of the repository")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> str.type\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"unconfigured_targets")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Gets the unconfigured target nodes for the ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"))),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    labels: ""\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"uquery")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkUQueryCtx"),"]"," that holds all uquery functions.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'() -> "uqueryctx"\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"uquery_legacy")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,"Please do not use this at the moment. We need to fix how cell resolution is done within cquery.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'() -> "uqueryctx"\n')))))),(0,a.mdx)("h2",{id:"analysis"},"analysis"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def analysis(labels: "", target_platform: "" = None, skip_incompatible: bool.type = None) -> ""\n')),(0,a.mdx)("p",null,"Runs analysis on the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),", accepting an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," which is the target platform configuration used to resolve configurations of any unconfigured target nodes, and an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"skip_incompatible")," boolean that indicates whether to skip analysis of nodes that are incompatible with the target platform. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," is either a string that can be parsed as a target label, or a target label."),(0,a.mdx)("h3",{id:"details"},"Details"),(0,a.mdx)("p",null,"The given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is a providers expression, which is either:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"- a single string that is a `target pattern`.\n- a single target node or label, configured or unconfigured\n- a single sub target label, configured or unconfigured\n- a list of the two options above.\n")),(0,a.mdx)("p",null,"This returns either a single ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkAnalysisResult"),"]"," if the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),' is "singular",\nor a dict keyed by sub target labels of ',"[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkAnalysisResult"),"]"," if the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),"\nis list-like"),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"audit"},"audit"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def audit() -> "audit_ctx"\n')),(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkAuditCtx"),"]"," that holds all the audit functions."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"build"},"build"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def build(spec: "", target_platform: "" = None) -> ""\n')),(0,a.mdx)("p",null,"Runs a build on the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),", accepting an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," which is the target platform configuration used to resolve configurations."),(0,a.mdx)("h3",{id:"details-1"},"Details"),(0,a.mdx)("p",null,"The given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is a providers expression, which is either:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"- a single string that is a `target pattern`.\n- a single target node or label, configured or unconfigured\n- a single provider label, configured or unconfigured\n- a list of the two options above.\n")),(0,a.mdx)("p",null,"This returns a dict keyed by sub target labels of ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkBuildResult"),"]"," if the\ngiven ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is list-like"),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"bxl_actions--bxl_actions"},"bxl_actions : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'"bxl_actions"')),(0,a.mdx)("p",null,"Returns the action context ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"BxlActionsCtx"),"]"," for creating and running actions."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cli_args--"},"cli_args : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'""')),(0,a.mdx)("p",null,"A struct of the command line args as declared using the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"cli_args"),"]"," module. These command lines are resolved per the users input on the cli when invoking the bxl script."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"configured_targets"},"configured_targets"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def configured_targets(labels: "", target_platform: "" = None) -> ""\n')),(0,a.mdx)("p",null,"Gets the target nodes for the ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),", accepting an optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," which is the target platform configuration used to resolve configurations of any unconfigured target nodes. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," is either a string that can be parsed as a target label, or a target label."),(0,a.mdx)("h3",{id:"details-2"},"Details"),(0,a.mdx)("p",null,"The given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is a ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"TargetExpr"),"]",", which is either:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"- a single string that is a `target pattern`.\n- a single target node or label, configured or unconfigured\n- a list of the two options above.\n")),(0,a.mdx)("p",null,"Note that this function does not accept ",(0,a.mdx)("inlineCode",{parentName:"p"},"Label")," (which is a configured provider label), since this\nis the label of a subtarget. You can get the underlying configured target label on the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Label"),"\nusing ",(0,a.mdx)("inlineCode",{parentName:"p"},"configured_targets()")," (ex: ",(0,a.mdx)("inlineCode",{parentName:"p"},"my_label.configured_target()"),")."),(0,a.mdx)("p",null,"This returns either a single ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkConfiguredTargetNode"),"]"," if the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),'\nis "singular", a dict keyed by target labels of ',"[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkConfiguredTargetNode"),"]"," if the\ngiven ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is list-like"),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cquery"},"cquery"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def cquery(target_platform: "" = None) -> "cqueryctx"\n')),(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkCQueryCtx"),"]"," that holds all the cquery functions. This function takes an optional parameter ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform"),", which is the target platform configuration used to configured any unconfigured target nodes."),(0,a.mdx)("h3",{id:"details-3"},"Details"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"target_platform")," is a target label, or a string that is a target label."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"cquery_legacy"},"cquery_legacy"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def cquery_legacy(target_platform: "" = None) -> "cqueryctx"\n')),(0,a.mdx)("p",null,"Please do not use this at the moment. We need to fix how cell resolution is done within cquery."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"fs--fs"},"fs : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'"fs"')),(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"BxlFilesystem"),"]"," for performing a basic set of filesystem operations within bxl"),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"output--"},"output : ",(0,a.mdx)("inlineCode",{parentName:"h2"},'""')),(0,a.mdx)("p",null,"Gets the output stream to the console via stdout. Items written to the output stream are considered to be the results of a bxl script, which will be displayed to stdout by buck2 even when the script is cached."),(0,a.mdx)("p",null,"Prints that are not result of the bxl should be printed via stderr via the stdlib ",(0,a.mdx)("inlineCode",{parentName:"p"},"print"),"\nand ",(0,a.mdx)("inlineCode",{parentName:"p"},"pprint"),"."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"root"},"root"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def root() -> str.type\n")),(0,a.mdx)("p",null,"Returns the absolute path to the root of the repository"),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"unconfigured_targets"},"unconfigured_targets"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def unconfigured_targets(labels: "") -> ""\n')),(0,a.mdx)("p",null,"Gets the unconfigured target nodes for the ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")),(0,a.mdx)("h3",{id:"details-4"},"Details"),(0,a.mdx)("p",null,"The given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is either:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"- a single string that is a `target pattern`.\n- a single unconfigured  target node or label\n- a list of the two options above.\n")),(0,a.mdx)("p",null,"This returns either a single ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkTargetNode"),"]"," if the given ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels"),'\nis "singular", a dict keyed by target labels of ',"[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkTargetNode"),"]"," if the\ngiven ",(0,a.mdx)("inlineCode",{parentName:"p"},"labels")," is list-like"),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"uquery"},"uquery"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def uquery() -> "uqueryctx"\n')),(0,a.mdx)("p",null,"Returns the ","[",(0,a.mdx)("inlineCode",{parentName:"p"},"StarlarkUQueryCtx"),"]"," that holds all uquery functions."),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"uquery_legacy"},"uquery_legacy"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def uquery_legacy() -> "uqueryctx"\n')),(0,a.mdx)("p",null,"Please do not use this at the moment. We need to fix how cell resolution is done within cquery."))}m.isMDXComponent=!0}}]);