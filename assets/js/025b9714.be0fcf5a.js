"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2531],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>x,mdx:()=>b,useMDXComponents:()=>s,withMDXComponents:()=>o});var l=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(){return d=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e},d.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},d=Object.keys(e);for(l=0;l<d.length;l++)t=d[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(l=0;l<d.length;l++)t=d[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=l.createContext({}),o=function(e){return function(n){var t=s(n.components);return l.createElement(e,d({},n,{components:t}))}},s=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},x=function(e){var n=s(e.components);return l.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},h=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,d=e.originalType,r=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),o=s(t),x=a,c=o["".concat(r,".").concat(x)]||o[x]||u[x]||d;return t?l.createElement(c,i(i({ref:n},p),{},{components:t})):l.createElement(c,i({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var d=t.length,r=new Array(d);r[0]=h;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[c]="string"==typeof e?e:a,r[1]=i;for(var p=2;p<d;p++)r[p]=t[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}h.displayName="MDXCreateElement"},82901:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>s,frontMatter:()=>d,metadata:()=>i,toc:()=>p});var l=t(87462),a=(t(67294),t(3905));const d={},r="list",i={unversionedId:"generated/native/standard/list",id:"generated/native/standard/list",title:"list",description:"Members",source:"@site/../docs/generated/native/standard/list.md",sourceDirName:"generated/native/standard",slug:"/generated/native/standard/list",permalink:"/docs/generated/native/standard/list",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"dict",permalink:"/docs/generated/native/standard/dict"},next:{title:"string",permalink:"/docs/generated/native/standard/string"}},m={},p=[{value:"Members",id:"members",level:3},{value:"append",id:"append",level:2},{value:"Details",id:"details",level:3},{value:"clear",id:"clear",level:2},{value:"Details",id:"details-1",level:3},{value:"extend",id:"extend",level:2},{value:"Details",id:"details-2",level:3},{value:"index",id:"index",level:2},{value:"Details",id:"details-3",level:3},{value:"insert",id:"insert",level:2},{value:"Details",id:"details-4",level:3},{value:"pop",id:"pop",level:2},{value:"Details",id:"details-5",level:3},{value:"remove",id:"remove",level:2},{value:"Details",id:"details-6",level:3}],o={toc:p};function s(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,l.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"list"},"list"),(0,a.mdx)("h3",{id:"members"},"Members"),(0,a.mdx)("table",{class:"starlark_table starlark_members_table"},(0,a.mdx)("thead",null,(0,a.mdx)("tr",null,(0,a.mdx)("th",null,"Member"),(0,a.mdx)("th",null,"Description"),(0,a.mdx)("th",null,"Type"))),(0,a.mdx)("tbody",null,(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"append")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7append"},"list.append"),": append an element to a list.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    el: ""\n) -> None\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"clear")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7clear"},"list.clear"),": clear a list")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"() -> None\n")))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"extend")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7extend"},"list.extend"),": extend a list with another iterable's content.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    other: iter("")\n) -> None\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"index")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7index"},"list.index"),": get the index of an element in the list.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    needle: "",\n  start: [None, int.type] = None,\n  end: [None, int.type] = None\n) -> int.type\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"insert")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7insert"},"list.insert"),": insert an element in a list.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    index: int.type,\n  el: ""\n) -> None\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"pop")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7pop"},"list.pop"),": removes and returns the last element of a list.")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    index: [None, ""] = None\n) -> ""\n')))),(0,a.mdx)("tr",null,(0,a.mdx)("td",null,(0,a.mdx)("p",null,"remove")),(0,a.mdx)("td",null,(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7remove"},"list.remove"),": remove a value from a list")),(0,a.mdx)("td",null,(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    needle: ""\n) -> None\n')))))),(0,a.mdx)("h2",{id:"append"},"append"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def append(el: "") -> None\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7append"},"list.append"),": append an element to a list."),(0,a.mdx)("h3",{id:"details"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.append(x)")," appends ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," to the list L, and returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),"."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"append")," fails if the list is frozen or has active iterators."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"x = []\nx.append(1)\nx.append(2)\nx.append(3)\nx == [1, 2, 3]\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"clear"},"clear"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def clear() -> None\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7clear"},"list.clear"),": clear a list"),(0,a.mdx)("h3",{id:"details-1"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.clear()")," removes all the elements of the list L and returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),".\nIt fails if the list is frozen or if there are active iterators."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"x = [1, 2, 3]\nx.clear()\nx == []\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"extend"},"extend"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def extend(other: iter("")) -> None\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7extend"},"list.extend"),": extend a list with another iterable's content."),(0,a.mdx)("h3",{id:"details-2"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.extend(x)")," appends the elements of ",(0,a.mdx)("inlineCode",{parentName:"p"},"x"),", which must be iterable, to\nthe list L, and returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),"."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"extend")," fails if ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," is not iterable, or if the list L is frozen or has\nactive iterators."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'x = []\nx.extend([1, 2, 3])\nx.extend(["foo"])\nx == [1, 2, 3, "foo"]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"index"},"index"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def index(needle: "", start: [None, int.type] = None, end: [None, int.type] = None) -> int.type\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7index"},"list.index"),": get the index of an element in the list."),(0,a.mdx)("h3",{id:"details-3"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.index(x[, start[, end]])")," finds ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," within the list L and returns its\nindex."),(0,a.mdx)("p",null,"The optional ",(0,a.mdx)("inlineCode",{parentName:"p"},"start")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"end")," parameters restrict the portion of\nlist L that is inspected.  If provided and not ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),", they must be list\nindices of type ",(0,a.mdx)("inlineCode",{parentName:"p"},"int"),". If an index is negative, ",(0,a.mdx)("inlineCode",{parentName:"p"},"len(L)")," is effectively\nadded to it, then if the index is outside the range ",(0,a.mdx)("inlineCode",{parentName:"p"},"[0:len(L)]"),", the\nnearest value within that range is used; see ",(0,a.mdx)("a",{parentName:"p",href:"#indexing"},"Indexing"),"."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"index")," fails if ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," is not found in L, or if ",(0,a.mdx)("inlineCode",{parentName:"p"},"start")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"end"),"\nis not a valid index (",(0,a.mdx)("inlineCode",{parentName:"p"},"int")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),")."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'x = ["b", "a", "n", "a", "n", "a"]\nx.index("a") == 1      # bAnana\nx.index("a", 2) == 3   # banAna\nx.index("a", -2) == 5  # bananA\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"insert"},"insert"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def insert(index: int.type, el: "") -> None\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7insert"},"list.insert"),": insert an element in a list."),(0,a.mdx)("h3",{id:"details-4"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.insert(i, x)")," inserts the value ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," in the list L at index ",(0,a.mdx)("inlineCode",{parentName:"p"},"i"),",\nmoving higher-numbered elements along by one.  It returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),"."),(0,a.mdx)("p",null,"As usual, the index ",(0,a.mdx)("inlineCode",{parentName:"p"},"i")," must be an ",(0,a.mdx)("inlineCode",{parentName:"p"},"int"),". If its value is negative,\nthe length of the list is added, then its value is clamped to the\nnearest value in the range ",(0,a.mdx)("inlineCode",{parentName:"p"},"[0:len(L)]")," to yield the effective index."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"insert")," fails if the list is frozen or has active iterators."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'x = ["b", "c", "e"]\nx.insert(0, "a")\nx.insert(-1, "d")\nx == ["a", "b", "c", "d", "e"]\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"pop"},"pop"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def pop(index: [None, ""] = None) -> ""\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7pop"},"list.pop"),": removes and returns the last element of a list."),(0,a.mdx)("h3",{id:"details-5"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.pop([index])")," removes and returns the last element of the list L, or,\nif the optional index is provided, at that index."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"pop")," fails if the index is negative or not less than the length of\nthe list, of if the list is frozen or has active iterators."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"x = [1, 2, 3]\nx.pop() == 3\nx.pop() == 2\nx == [1]\n")),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"remove"},"remove"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def remove(needle: "") -> None\n')),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/google/skylark/blob/3705afa472e466b8b061cce44b47c9ddc6db696d/doc/spec.md#list%C2%B7remove"},"list.remove"),": remove a value from a list"),(0,a.mdx)("h3",{id:"details-6"},"Details"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"L.remove(x)")," removes the first occurrence of the value ",(0,a.mdx)("inlineCode",{parentName:"p"},"x")," from the\nlist L, and returns ",(0,a.mdx)("inlineCode",{parentName:"p"},"None"),"."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"remove")," fails if the list does not contain ",(0,a.mdx)("inlineCode",{parentName:"p"},"x"),", is frozen, or has\nactive iterators."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"x = [1, 2, 3, 2]\nx.remove(2)\nx == [1, 3, 2]\nx.remove(2)\nx == [1, 3]\n")),(0,a.mdx)("p",null,"A subsequent call to ",(0,a.mdx)("inlineCode",{parentName:"p"},"x.remove(2)")," would yield an error because the\nelement won't be found."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"x = [1, 2, 3, 2]\nx.remove(2)\nx.remove(2)\nx.remove(2) # error: not found\n")))}s.isMDXComponent=!0}}]);