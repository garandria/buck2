"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3890],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>s,mdx:()=>g,useMDXComponents:()=>o,withMDXComponents:()=>i});var l=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e},a.apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),i=function(e){return function(n){var t=o(n.components);return l.createElement(e,a({},n,{components:t}))}},o=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},s=function(e){var n=o(e.components);return l.createElement(p.Provider,{value:n},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},f=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),i=o(t),s=r,c=i["".concat(d,".").concat(s)]||i[s]||x[s]||a;return t?l.createElement(c,m(m({ref:n},p),{},{components:t})):l.createElement(c,m({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,d=new Array(a);d[0]=f;var m={};for(var u in n)hasOwnProperty.call(n,u)&&(m[u]=n[u]);m.originalType=e,m[c]="string"==typeof e?e:r,d[1]=m;for(var p=2;p<a;p++)d[p]=t[p];return l.createElement.apply(null,d)}return l.createElement.apply(null,t)}f.displayName="MDXCreateElement"},94679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>o,frontMatter:()=>a,metadata:()=>m,toc:()=>p});var l=t(87462),r=(t(67294),t(3905));const a={},d="cmd_args",m={unversionedId:"generated/native/cmd_args",id:"generated/native/cmd_args",title:"cmd_args",description:"Members",source:"@site/../docs/generated/native/cmd_args.md",sourceDirName:"generated/native",slug:"/generated/native/cmd_args",permalink:"/docs/generated/native/cmd_args",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"builtins",permalink:"/docs/generated/native/builtins"},next:{title:"ctx.actions",permalink:"/docs/generated/native/ctx.actions"}},u={},p=[{value:"Members",id:"members",level:3},{value:"absolute_prefix",id:"absolute_prefix",level:2},{value:"absolute_suffix",id:"absolute_suffix",level:2},{value:"add",id:"add",level:2},{value:"copy",id:"copy",level:2},{value:"hidden",id:"hidden",level:2},{value:"ignore_artifacts",id:"ignore_artifacts",level:2},{value:"inputs : <code>&quot;command_line_inputs&quot;</code>",id:"inputs--command_line_inputs",level:2},{value:"outputs : <code>[&quot;output_artifact&quot;]</code>",id:"outputs--output_artifact",level:2},{value:"parent",id:"parent",level:2},{value:"Details",id:"details",level:3},{value:"relative_to",id:"relative_to",level:2},{value:"replace_regex",id:"replace_regex",level:2}],i={toc:p};function o(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,l.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"cmd_args"},"cmd_args"),(0,r.mdx)("h3",{id:"members"},"Members"),(0,r.mdx)("table",{class:"starlark_table starlark_members_table"},(0,r.mdx)("thead",null,(0,r.mdx)("tr",null,(0,r.mdx)("th",null,"Member"),(0,r.mdx)("th",null,"Description"),(0,r.mdx)("th",null,"Type"))),(0,r.mdx)("tbody",null,(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"absolute_prefix")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    prefix: str.type\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"absolute_suffix")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    suffix: str.type\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"add")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    *args: UNKNOWN\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"copy")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'() -> "cmd_args"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"hidden")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    *args: UNKNOWN\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"ignore_artifacts")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'() -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"inputs")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"Collect all the inputs (including hidden) referenced by this command line.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'"command_line_inputs"\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"outputs")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"Collect all the outputs (including hidden) referenced by this command line.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'["output_artifact"]\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"parent")),(0,r.mdx)("td",null,(0,r.mdx)("p",null,"For all the artifacts listed in this ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", use their parent directory.")),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    count: int.type = None\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"relative_to")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    directory: "",\n  parent: int.type = None\n) -> ""\n')))),(0,r.mdx)("tr",null,(0,r.mdx)("td",null,(0,r.mdx)("p",null,"replace_regex")),(0,r.mdx)("td",null),(0,r.mdx)("td",null,(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    pattern: str.type,\n  replacement: str.type\n) -> ""\n')))))),(0,r.mdx)("h2",{id:"absolute_prefix"},"absolute_prefix"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def absolute_prefix(prefix: str.type) -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"absolute_suffix"},"absolute_suffix"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def absolute_suffix(suffix: str.type) -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"add"},"add"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def add(*args: UNKNOWN) -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"copy"},"copy"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def copy() -> "cmd_args"\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"hidden"},"hidden"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def hidden(*args: UNKNOWN) -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"ignore_artifacts"},"ignore_artifacts"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def ignore_artifacts() -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"inputs--command_line_inputs"},"inputs : ",(0,r.mdx)("inlineCode",{parentName:"h2"},'"command_line_inputs"')),(0,r.mdx)("p",null,"Collect all the inputs (including hidden) referenced by this command line."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"outputs--output_artifact"},"outputs : ",(0,r.mdx)("inlineCode",{parentName:"h2"},'["output_artifact"]')),(0,r.mdx)("p",null,"Collect all the outputs (including hidden) referenced by this command line."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"parent"},"parent"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def parent(count: int.type = None) -> ""\n')),(0,r.mdx)("p",null,"For all the artifacts listed in this ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", use their parent directory."),(0,r.mdx)("h3",{id:"details"},"Details"),(0,r.mdx)("p",null,"Typically used when the file name is passed one way, and the directory another,\ne.g. ",(0,r.mdx)("inlineCode",{parentName:"p"},'cmd_args(artifact, format="-L{}").parent()'),"."),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"relative_to"},"relative_to"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def relative_to(directory: "", parent: int.type = None) -> ""\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h2",{id:"replace_regex"},"replace_regex"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'def replace_regex(pattern: str.type, replacement: str.type) -> ""\n')))}o.isMDXComponent=!0}}]);